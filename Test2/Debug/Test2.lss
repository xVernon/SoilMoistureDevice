
Test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00001394  00001428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001394  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080014a  0080014a  00001472  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ed  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afc  00000000  00000000  00002c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dc6  00000000  00000000  000036fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  000044c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000787  00000000  00000000  00004860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001178  00000000  00000000  00004fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000615f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 05 01 	jmp	0x20a	; 0x20a <__ctors_end>
       4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
       8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
       c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      10:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      14:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      18:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      1c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      20:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      24:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      28:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      2c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      30:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      34:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      38:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      3c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      40:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      44:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      48:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      4c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      50:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      54:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      58:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      5c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      60:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      64:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
      68:	f5 04       	cpc	r15, r5
      6a:	fb 04       	cpc	r15, r11
      6c:	fb 04       	cpc	r15, r11
      6e:	fb 04       	cpc	r15, r11
      70:	fb 04       	cpc	r15, r11
      72:	fb 04       	cpc	r15, r11
      74:	fb 04       	cpc	r15, r11
      76:	fb 04       	cpc	r15, r11
      78:	fb 04       	cpc	r15, r11
      7a:	fb 04       	cpc	r15, r11
      7c:	fb 04       	cpc	r15, r11
      7e:	fb 04       	cpc	r15, r11
      80:	fb 04       	cpc	r15, r11
      82:	fb 04       	cpc	r15, r11
      84:	fb 04       	cpc	r15, r11
      86:	fb 04       	cpc	r15, r11
      88:	fb 04       	cpc	r15, r11
      8a:	fb 04       	cpc	r15, r11
      8c:	fb 04       	cpc	r15, r11
      8e:	fb 04       	cpc	r15, r11
      90:	fb 04       	cpc	r15, r11
      92:	fb 04       	cpc	r15, r11
      94:	fb 04       	cpc	r15, r11
      96:	fb 04       	cpc	r15, r11
      98:	fb 04       	cpc	r15, r11
      9a:	fb 04       	cpc	r15, r11
      9c:	fb 04       	cpc	r15, r11
      9e:	fb 04       	cpc	r15, r11
      a0:	fb 04       	cpc	r15, r11
      a2:	cb 04       	cpc	r12, r11
      a4:	3c 04       	cpc	r3, r12
      a6:	5f 04       	cpc	r5, r15
      a8:	fb 04       	cpc	r15, r11
      aa:	dd 04       	cpc	r13, r13
      ac:	fb 04       	cpc	r15, r11
      ae:	fb 04       	cpc	r15, r11
      b0:	fb 04       	cpc	r15, r11
      b2:	fb 04       	cpc	r15, r11
      b4:	fb 04       	cpc	r15, r11
      b6:	fb 04       	cpc	r15, r11
      b8:	fb 04       	cpc	r15, r11
      ba:	fb 04       	cpc	r15, r11
      bc:	fb 04       	cpc	r15, r11
      be:	fb 04       	cpc	r15, r11
      c0:	fb 04       	cpc	r15, r11
      c2:	fb 04       	cpc	r15, r11
      c4:	ea 04       	cpc	r14, r10
      c6:	fb 04       	cpc	r15, r11
      c8:	8c 04       	cpc	r8, r12
      ca:	fb 04       	cpc	r15, r11
      cc:	fb 04       	cpc	r15, r11
      ce:	aa 04       	cpc	r10, r10
      d0:	fb 04       	cpc	r15, r11
      d2:	fb 04       	cpc	r15, r11
      d4:	fb 04       	cpc	r15, r11
      d6:	fb 04       	cpc	r15, r11
      d8:	fb 04       	cpc	r15, r11
      da:	fb 04       	cpc	r15, r11
      dc:	fb 04       	cpc	r15, r11
      de:	fb 04       	cpc	r15, r11
      e0:	fb 04       	cpc	r15, r11
      e2:	b9 04       	cpc	r11, r9
      e4:	3c 04       	cpc	r3, r12
      e6:	46 04       	cpc	r4, r6
      e8:	fb 04       	cpc	r15, r11
      ea:	dd 04       	cpc	r13, r13
      ec:	fb 04       	cpc	r15, r11
      ee:	fb 04       	cpc	r15, r11
      f0:	fb 04       	cpc	r15, r11
      f2:	fb 04       	cpc	r15, r11
      f4:	fb 04       	cpc	r15, r11
      f6:	fb 04       	cpc	r15, r11
      f8:	fb 04       	cpc	r15, r11
      fa:	fb 04       	cpc	r15, r11
      fc:	fb 04       	cpc	r15, r11
      fe:	fb 04       	cpc	r15, r11
     100:	fb 04       	cpc	r15, r11
     102:	fb 04       	cpc	r15, r11
     104:	ea 04       	cpc	r14, r10
     106:	fb 04       	cpc	r15, r11
     108:	7d 04       	cpc	r7, r13
     10a:	fb 04       	cpc	r15, r11
     10c:	fb 04       	cpc	r15, r11
     10e:	9b 04       	cpc	r9, r11

00000110 <__trampolines_end>:
     110:	00 40       	sbci	r16, 0x00	; 0
     112:	7a 10       	cpse	r7, r10
     114:	f3 5a       	subi	r31, 0xA3	; 163
     116:	00 a0       	ldd	r0, Z+32	; 0x20
     118:	72 4e       	sbci	r23, 0xE2	; 226
     11a:	18 09       	sbc	r17, r8
     11c:	00 10       	cpse	r0, r0
     11e:	a5 d4       	rcall	.+2378   	; 0xa6a <__addsf3x+0x1e>
     120:	e8 00       	.word	0x00e8	; ????
     122:	00 e8       	ldi	r16, 0x80	; 128
     124:	76 48       	sbci	r23, 0x86	; 134
     126:	17 00       	.word	0x0017	; ????
     128:	00 e4       	ldi	r16, 0x40	; 64
     12a:	0b 54       	subi	r16, 0x4B	; 75
     12c:	02 00       	.word	0x0002	; ????
     12e:	00 ca       	rjmp	.-3072   	; 0xfffff530 <__eeprom_end+0xff7ef530>
     130:	9a 3b       	cpi	r25, 0xBA	; 186
     132:	00 00       	nop
     134:	00 e1       	ldi	r16, 0x10	; 16
     136:	f5 05       	cpc	r31, r5
     138:	00 00       	nop
     13a:	80 96       	adiw	r24, 0x20	; 32
     13c:	98 00       	.word	0x0098	; ????
     13e:	00 00       	nop
     140:	40 42       	sbci	r20, 0x20	; 32
     142:	0f 00       	.word	0x000f	; ????
     144:	00 00       	nop
     146:	a0 86       	std	Z+8, r10	; 0x08
     148:	01 00       	.word	0x0001	; ????
     14a:	00 00       	nop
     14c:	10 27       	eor	r17, r16
     14e:	00 00       	nop
     150:	00 00       	nop
     152:	e8 03       	fmulsu	r22, r16
     154:	00 00       	nop
     156:	00 00       	nop
     158:	64 00       	.word	0x0064	; ????
     15a:	00 00       	nop
     15c:	00 00       	nop
     15e:	0a 00       	.word	0x000a	; ????
     160:	00 00       	nop
     162:	00 00       	nop
     164:	01 00       	.word	0x0001	; ????
     166:	00 00       	nop
     168:	00 00       	nop
     16a:	2c 76       	andi	r18, 0x6C	; 108
     16c:	d8 88       	ldd	r13, Y+16	; 0x10
     16e:	dc 67       	ori	r29, 0x7C	; 124
     170:	4f 08       	sbc	r4, r15
     172:	23 df       	rcall	.-442    	; 0xffffffba <__eeprom_end+0xff7effba>
     174:	c1 df       	rcall	.-126    	; 0xf8 <__SREG__+0xb9>
     176:	ae 59       	subi	r26, 0x9E	; 158
     178:	e1 b1       	in	r30, 0x01	; 1
     17a:	b7 96       	adiw	r30, 0x27	; 39
     17c:	e5 e3       	ldi	r30, 0x35	; 53
     17e:	e4 53       	subi	r30, 0x34	; 52
     180:	c6 3a       	cpi	r28, 0xA6	; 166
     182:	e6 51       	subi	r30, 0x16	; 22
     184:	99 76       	andi	r25, 0x69	; 105
     186:	96 e8       	ldi	r25, 0x86	; 134
     188:	e6 c2       	rjmp	.+1484   	; 0x756 <UART_TxNumber+0x11c>
     18a:	84 26       	eor	r8, r20
     18c:	eb 89       	ldd	r30, Y+19	; 0x13
     18e:	8c 9b       	sbis	0x11, 4	; 17
     190:	62 ed       	ldi	r22, 0xD2	; 210
     192:	40 7c       	andi	r20, 0xC0	; 192
     194:	6f fc       	.word	0xfc6f	; ????
     196:	ef bc       	out	0x2f, r14	; 47
     198:	9c 9f       	mul	r25, r28
     19a:	40 f2       	brcs	.-112    	; 0x12c <__trampolines_end+0x1c>
     19c:	ba a5       	ldd	r27, Y+42	; 0x2a
     19e:	6f a5       	ldd	r22, Y+47	; 0x2f
     1a0:	f4 90       	lpm	r15, Z
     1a2:	05 5a       	subi	r16, 0xA5	; 165
     1a4:	2a f7       	brpl	.-54     	; 0x170 <__trampolines_end+0x60>
     1a6:	5c 93       	st	X, r21
     1a8:	6b 6c       	ori	r22, 0xCB	; 203
     1aa:	f9 67       	ori	r31, 0x79	; 121
     1ac:	6d c1       	rjmp	.+730    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     1ae:	1b fc       	.word	0xfc1b	; ????
     1b0:	e0 e4       	ldi	r30, 0x40	; 64
     1b2:	0d 47       	sbci	r16, 0x7D	; 125
     1b4:	fe f5       	brtc	.+126    	; 0x234 <.do_clear_bss_loop>
     1b6:	20 e6       	ldi	r18, 0x60	; 96
     1b8:	b5 00       	.word	0x00b5	; ????
     1ba:	d0 ed       	ldi	r29, 0xD0	; 208
     1bc:	90 2e       	mov	r9, r16
     1be:	03 00       	.word	0x0003	; ????
     1c0:	94 35       	cpi	r25, 0x54	; 84
     1c2:	77 05       	cpc	r23, r7
     1c4:	00 80       	ld	r0, Z
     1c6:	84 1e       	adc	r8, r20
     1c8:	08 00       	.word	0x0008	; ????
     1ca:	00 20       	and	r0, r0
     1cc:	4e 0a       	sbc	r4, r30
     1ce:	00 00       	nop
     1d0:	00 c8       	rjmp	.-4096   	; 0xfffff1d2 <__eeprom_end+0xff7ef1d2>
     1d2:	0c 33       	cpi	r16, 0x3C	; 60
     1d4:	33 33       	cpi	r19, 0x33	; 51
     1d6:	33 0f       	add	r19, r19
     1d8:	98 6e       	ori	r25, 0xE8	; 232
     1da:	12 83       	std	Z+2, r17	; 0x02
     1dc:	11 41       	sbci	r17, 0x11	; 17
     1de:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1e0:	21 14       	cp	r2, r1
     1e2:	89 3b       	cpi	r24, 0xB9	; 185
     1e4:	e6 55       	subi	r30, 0x56	; 86
     1e6:	16 cf       	rjmp	.-468    	; 0x14 <__FUSE_REGION_LENGTH__+0x11>
     1e8:	fe e6       	ldi	r31, 0x6E	; 110
     1ea:	db 18       	sub	r13, r11
     1ec:	d1 84       	ldd	r13, Z+9	; 0x09
     1ee:	4b 38       	cpi	r20, 0x8B	; 139
     1f0:	1b f7       	brvc	.-58     	; 0x1b8 <__trampolines_end+0xa8>
     1f2:	7c 1d       	adc	r23, r12
     1f4:	90 1d       	adc	r25, r0
     1f6:	a4 bb       	out	0x14, r26	; 20
     1f8:	e4 24       	eor	r14, r4
     1fa:	20 32       	cpi	r18, 0x20	; 32
     1fc:	84 72       	andi	r24, 0x24	; 36
     1fe:	5e 22       	and	r5, r30
     200:	81 00       	.word	0x0081	; ????
     202:	c9 f1       	breq	.+114    	; 0x276 <DELAY_sec+0x18>
     204:	24 ec       	ldi	r18, 0xC4	; 196
     206:	a1 e5       	ldi	r26, 0x51	; 81
     208:	3d 27       	eor	r19, r29

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	d8 e0       	ldi	r29, 0x08	; 8
     212:	de bf       	out	0x3e, r29	; 62
     214:	cd bf       	out	0x3d, r28	; 61

00000216 <__do_copy_data>:
     216:	11 e0       	ldi	r17, 0x01	; 1
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b1 e0       	ldi	r27, 0x01	; 1
     21c:	e4 e9       	ldi	r30, 0x94	; 148
     21e:	f3 e1       	ldi	r31, 0x13	; 19
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x10>
     222:	05 90       	lpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	aa 34       	cpi	r26, 0x4A	; 74
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0xc>

0000022c <__do_clear_bss>:
     22c:	21 e0       	ldi	r18, 0x01	; 1
     22e:	aa e4       	ldi	r26, 0x4A	; 74
     230:	b1 e0       	ldi	r27, 0x01	; 1
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	ab 34       	cpi	r26, 0x4B	; 75
     238:	b2 07       	cpc	r27, r18
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
     23c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <main>
     240:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <_exit>

00000244 <__bad_interrupt>:
     244:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000248 <DELAY_ms>:
     It generates a delay of 1ms for each count,
     if 1000 is passed as the argument then it generates delay of 1000ms(1sec)
 ***************************************************************************************************/
void DELAY_ms(uint16_t ms_count) 
{
    while (ms_count != 0) 
     248:	07 c0       	rjmp	.+14     	; 0x258 <DELAY_ms+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     24a:	e9 ef       	ldi	r30, 0xF9	; 249
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	31 97       	sbiw	r30, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <DELAY_ms+0x6>
     252:	00 c0       	rjmp	.+0      	; 0x254 <DELAY_ms+0xc>
     254:	00 00       	nop
    {
        _delay_us(1000); //DELAY_us is called to generate 1ms delay
        ms_count--;
     256:	01 97       	sbiw	r24, 0x01	; 1
     It generates a delay of 1ms for each count,
     if 1000 is passed as the argument then it generates delay of 1000ms(1sec)
 ***************************************************************************************************/
void DELAY_ms(uint16_t ms_count) 
{
    while (ms_count != 0) 
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	b9 f7       	brne	.-18     	; 0x24a <DELAY_ms+0x2>
    {
        _delay_us(1000); //DELAY_us is called to generate 1ms delay
        ms_count--;
    }
}
     25c:	08 95       	ret

0000025e <DELAY_sec>:
      if 10 is passed as the argument then it generates delay of 10sec
 ***************************************************************************************************/
#if (ENABLE_DELAY_sec == 1)

void DELAY_sec(uint16_t sec_count) 
{
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	ec 01       	movw	r28, r24
    while (sec_count != 0) {
     264:	05 c0       	rjmp	.+10     	; 0x270 <DELAY_sec+0x12>
        DELAY_ms(1000); //DELAY_ms is called to generate 1sec delay
     266:	88 ee       	ldi	r24, 0xE8	; 232
     268:	93 e0       	ldi	r25, 0x03	; 3
     26a:	0e 94 24 01 	call	0x248	; 0x248 <DELAY_ms>
        sec_count--;
     26e:	21 97       	sbiw	r28, 0x01	; 1
 ***************************************************************************************************/
#if (ENABLE_DELAY_sec == 1)

void DELAY_sec(uint16_t sec_count) 
{
    while (sec_count != 0) {
     270:	20 97       	sbiw	r28, 0x00	; 0
     272:	c9 f7       	brne	.-14     	; 0x266 <DELAY_sec+0x8>
        DELAY_ms(1000); //DELAY_ms is called to generate 1sec delay
        sec_count--;
    }
}
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <usart_init>:
	}
	else
	{
		PORTB = (1 << PB1);
	}
}
     27a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     27e:	87 e6       	ldi	r24, 0x67	; 103
     280:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     284:	e1 ec       	ldi	r30, 0xC1	; 193
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	88 61       	ori	r24, 0x18	; 24
     28c:	80 83       	st	Z, r24
     28e:	e2 ec       	ldi	r30, 0xC2	; 194
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	80 81       	ld	r24, Z
     294:	86 60       	ori	r24, 0x06	; 6
     296:	80 83       	st	Z, r24
     298:	08 95       	ret

0000029a <sendbyte>:
     29a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     29e:	95 ff       	sbrs	r25, 5
     2a0:	fc cf       	rjmp	.-8      	; 0x29a <sendbyte>
     2a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     2a6:	08 95       	ret

000002a8 <sendstr>:
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	8c 01       	movw	r16, r24
     2b0:	c0 e0       	ldi	r28, 0x00	; 0
     2b2:	03 c0       	rjmp	.+6      	; 0x2ba <sendstr+0x12>
     2b4:	0e 94 4d 01 	call	0x29a	; 0x29a <sendbyte>
     2b8:	cf 5f       	subi	r28, 0xFF	; 255
     2ba:	f8 01       	movw	r30, r16
     2bc:	ec 0f       	add	r30, r28
     2be:	f1 1d       	adc	r31, r1
     2c0:	80 81       	ld	r24, Z
     2c2:	81 11       	cpse	r24, r1
     2c4:	f7 cf       	rjmp	.-18     	; 0x2b4 <sendstr+0xc>
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	08 95       	ret

000002ce <receivebyte>:
     2ce:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     2d2:	88 23       	and	r24, r24
     2d4:	e4 f7       	brge	.-8      	; 0x2ce <receivebyte>
     2d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     2da:	08 95       	ret

000002dc <ADC_Init>:
     2dc:	87 b1       	in	r24, 0x07	; 7
     2de:	87 b9       	out	0x07, r24	; 7
     2e0:	87 e8       	ldi	r24, 0x87	; 135
     2e2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     2e6:	08 95       	ret

000002e8 <ADC_measure>:
     2e8:	ac e7       	ldi	r26, 0x7C	; 124
     2ea:	b0 e0       	ldi	r27, 0x00	; 0
     2ec:	9c 91       	ld	r25, X
     2ee:	90 64       	ori	r25, 0x40	; 64
     2f0:	9c 93       	st	X, r25
     2f2:	ea e7       	ldi	r30, 0x7A	; 122
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	90 81       	ld	r25, Z
     2f8:	97 68       	ori	r25, 0x87	; 135
     2fa:	90 83       	st	Z, r25
     2fc:	9c 91       	ld	r25, X
     2fe:	90 7e       	andi	r25, 0xE0	; 224
     300:	89 0f       	add	r24, r25
     302:	8c 93       	st	X, r24
     304:	80 81       	ld	r24, Z
     306:	80 64       	ori	r24, 0x40	; 64
     308:	80 83       	st	Z, r24
     30a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     30e:	86 fd       	sbrc	r24, 6
     310:	fc cf       	rjmp	.-8      	; 0x30a <ADC_measure+0x22>
     312:	08 95       	ret

00000314 <make_measure>:
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     31c:	d0 91 79 00 	lds	r29, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0e 94 74 01 	call	0x2e8	; 0x2e8 <ADC_measure>
     326:	1c 16       	cp	r1, r28
     328:	1d 06       	cpc	r1, r29
     32a:	9c f4       	brge	.+38     	; 0x352 <make_measure+0x3e>
     32c:	be 01       	movw	r22, r28
     32e:	dd 0f       	add	r29, r29
     330:	88 0b       	sbc	r24, r24
     332:	99 0b       	sbc	r25, r25
     334:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__floatsisf>
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	48 ec       	ldi	r20, 0xC8	; 200
     33e:	52 e4       	ldi	r21, 0x42	; 66
     340:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e8       	ldi	r19, 0x80	; 128
     348:	49 e0       	ldi	r20, 0x09	; 9
     34a:	54 e4       	ldi	r21, 0x44	; 68
     34c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__divsf3>
     350:	03 c0       	rjmp	.+6      	; 0x358 <make_measure+0x44>
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	cb 01       	movw	r24, r22
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret

0000035e <scan_LED_turn_on>:

void scan_LED_turn_on()
{
	PORTB |= (1 << PB3) | (1 << PB1) | (1 << PB2);
     35e:	85 b1       	in	r24, 0x05	; 5
     360:	8e 60       	ori	r24, 0x0E	; 14
     362:	85 b9       	out	0x05, r24	; 5
     364:	08 95       	ret

00000366 <EEPROM_WriteByte>:
*/


void EEPROM_WriteByte(uint16_t v_eepromAddress_u16, uint8_t v_eepromData_u8)
{
	while(util_IsBitSet(EECR,EEPE)); // Wait for completion of previous write.
     366:	f9 99       	sbic	0x1f, 1	; 31
     368:	fe cf       	rjmp	.-4      	; 0x366 <EEPROM_WriteByte>
	                                 // EEWE will be cleared by hardware once Eeprom write is completed.

	EEAR = v_eepromAddress_u16;  //Load the eeprom address and data
     36a:	92 bd       	out	0x22, r25	; 34
     36c:	81 bd       	out	0x21, r24	; 33
	EEDR = v_eepromData_u8;
     36e:	60 bd       	out	0x20, r22	; 32

	util_BitSet(EECR,EEMPE);    // Eeprom Master Write Enable
     370:	8f b3       	in	r24, 0x1f	; 31
     372:	84 60       	ori	r24, 0x04	; 4
     374:	8f bb       	out	0x1f, r24	; 31
	util_BitSet(EECR,EEPE);     // Start eeprom write by setting EEWE
     376:	8f b3       	in	r24, 0x1f	; 31
     378:	82 60       	ori	r24, 0x02	; 2
     37a:	8f bb       	out	0x1f, r24	; 31
     37c:	08 95       	ret

0000037e <EEPROM_ReadByte>:

 * description: This function is used to read the data from specified EEPROM_address.        
 ***************************************************************************************************/
uint8_t EEPROM_ReadByte(uint16_t v_eepromAddress_u16)
{
	while(util_IsBitSet(EECR,EEPE));  //Wait for completion of previous write if any.
     37e:	f9 99       	sbic	0x1f, 1	; 31
     380:	fe cf       	rjmp	.-4      	; 0x37e <EEPROM_ReadByte>

	EEAR = v_eepromAddress_u16;    //Load the address from where the data needs to be read.
     382:	92 bd       	out	0x22, r25	; 34
     384:	81 bd       	out	0x21, r24	; 33
	util_BitSet(EECR,EERE);   // start eeprom read by setting EERE
     386:	8f b3       	in	r24, 0x1f	; 31
     388:	81 60       	ori	r24, 0x01	; 1
     38a:	8f bb       	out	0x1f, r24	; 31

	return EEDR;             // Return data from data register
     38c:	80 b5       	in	r24, 0x20	; 32
}
     38e:	08 95       	ret

00000390 <EEPROM_WriteString>:

void EEPROM_WriteString(uint16_t v_eepromAddress_u16, uint8_t *ptr_stringPointer_u8)
{
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	8c 01       	movw	r16, r24
     39a:	eb 01       	movw	r28, r22
	do
	{
		EEPROM_WriteByte(v_eepromAddress_u16,*ptr_stringPointer_u8); //Write a byte from RAM to EEPROM
     39c:	69 91       	ld	r22, Y+
     39e:	c8 01       	movw	r24, r16
     3a0:	0e 94 b3 01 	call	0x366	; 0x366 <EEPROM_WriteByte>
		ptr_stringPointer_u8++;								//Increment the RAM Address
		v_eepromAddress_u16++;								//Increment the Eeprom Address
     3a4:	0f 5f       	subi	r16, 0xFF	; 255
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
	}while(*(ptr_stringPointer_u8-1) !=0);
     3a8:	fe 01       	movw	r30, r28
     3aa:	31 97       	sbiw	r30, 0x01	; 1
     3ac:	80 81       	ld	r24, Z
     3ae:	81 11       	cpse	r24, r1
     3b0:	f5 cf       	rjmp	.-22     	; 0x39c <EEPROM_WriteString+0xc>
}
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	08 95       	ret

000003bc <EEPROM_ReadString>:
 * description:This function is used to Read a String from specified EEPROM_address.
           The string read from eeprom will be copied to specified buffer along with NULL character
 ***************************************************************************************************/

void EEPROM_ReadString(uint16_t v_eepromAddress_u16, uint8_t *ptr_destStringAddress_u8)
{
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	ec 01       	movw	r28, r24
     3c6:	8b 01       	movw	r16, r22
	char eeprom_data;

	do
	{
		eeprom_data = EEPROM_ReadByte(v_eepromAddress_u16); //Read a byte from EEPROM to RAM
     3c8:	ce 01       	movw	r24, r28
     3ca:	0e 94 bf 01 	call	0x37e	; 0x37e <EEPROM_ReadByte>
		*ptr_destStringAddress_u8 = eeprom_data;			 //Copy the data into String Buffer
     3ce:	f8 01       	movw	r30, r16
     3d0:	81 93       	st	Z+, r24
     3d2:	8f 01       	movw	r16, r30
		ptr_destStringAddress_u8++;						 //Increment the RAM Address
		v_eepromAddress_u16++;							 //Increment the Eeprom Address
     3d4:	21 96       	adiw	r28, 0x01	; 1
	}while(eeprom_data!=0);
     3d6:	81 11       	cpse	r24, r1
     3d8:	f7 cf       	rjmp	.-18     	; 0x3c8 <EEPROM_ReadString+0xc>
}
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	08 95       	ret

000003e4 <main>:
unsigned char offmsg[] = "OFF\n";
unsigned char defaultmsg[] = "LED Status:";
unsigned char rxdata;

int main()
{
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	69 97       	sbiw	r28, 0x19	; 25
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61
	 //rtc.year = 0x22;
	 //rtc.weekDay = 7; // Friday: 5th day of week considering monday as first day.
	 //RTC_SetDateTime(&rtc);
	
	//UWAGAAGAGAGAGA
	usart_init();
     3f8:	0e 94 3d 01 	call	0x27a	; 0x27a <usart_init>
	ADC_Init();
     3fc:	0e 94 6e 01 	call	0x2dc	; 0x2dc <ADC_Init>
	unsigned char array[4];
	unsigned char time_array[6] = ";18:03;";
	unsigned char date_array[8] = "09.01.22;";
	unsigned char return_value[21] = "23/02/22/12/01/00.00<";
     400:	85 e1       	ldi	r24, 0x15	; 21
     402:	e0 e0       	ldi	r30, 0x00	; 0
     404:	f1 e0       	ldi	r31, 0x01	; 1
     406:	de 01       	movw	r26, r28
     408:	15 96       	adiw	r26, 0x05	; 5
     40a:	01 90       	ld	r0, Z+
     40c:	0d 92       	st	X+, r0
     40e:	8a 95       	dec	r24
     410:	e1 f7       	brne	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	uint16_t eeprom_address = 1;
	uint16_t eeprom_address2 = 1;
	unsigned char read_str[50];
	
	//Buttons init
	DDRD &= ~(1<<PD1) | ~(1<<PD2);
     412:	8a b1       	in	r24, 0x0a	; 10
     414:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PD1) | (1<<PD2);
     416:	8b b1       	in	r24, 0x0b	; 11
     418:	86 60       	ori	r24, 0x06	; 6
     41a:	8b b9       	out	0x0b, r24	; 11
	
	//LEDs init
	DDRB |= (1<<PB1) | (1<<PB2) | (1<<PB3);
     41c:	84 b1       	in	r24, 0x04	; 4
     41e:	8e 60       	ori	r24, 0x0E	; 14
     420:	84 b9       	out	0x04, r24	; 4
	
	//turn_on_light();
	sendstr("START\n");
     422:	86 e1       	ldi	r24, 0x16	; 22
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 54 01 	call	0x2a8	; 0x2a8 <sendstr>
	int j = 0;
	int n = 0;
	int a = 0;
	int b = 0;
	uint16_t eeprom_address = 1;
	uint16_t eeprom_address2 = 1;
     42a:	cc 24       	eor	r12, r12
     42c:	c3 94       	inc	r12
     42e:	d1 2c       	mov	r13, r1
	int i = 0;
	int j = 0;
	int n = 0;
	int a = 0;
	int b = 0;
	uint16_t eeprom_address = 1;
     430:	ee 24       	eor	r14, r14
     432:	e3 94       	inc	r14
     434:	f1 2c       	mov	r15, r1
	//turn_on_light();
	sendstr("START\n");
	
	while(1)
	{
			scan_LED_turn_on();
     436:	0e 94 af 01 	call	0x35e	; 0x35e <scan_LED_turn_on>
			avs = make_measure();
     43a:	0e 94 8a 01 	call	0x314	; 0x314 <make_measure>
     43e:	b6 2e       	mov	r11, r22
     440:	a7 2e       	mov	r10, r23
     442:	98 2e       	mov	r9, r24
     444:	89 2e       	mov	r8, r25
				strcat(array,"%\n");
			}
			*/	
			
			
			rxdata = receivebyte();
     446:	0e 94 67 01 	call	0x2ce	; 0x2ce <receivebyte>
     44a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
			if(rxdata == 'a')
     44e:	81 36       	cpi	r24, 0x61	; 97
     450:	01 f5       	brne	.+64     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
			{
				PORTB &= ~(1 << PB1);
     452:	85 b1       	in	r24, 0x05	; 5
     454:	8d 7f       	andi	r24, 0xFD	; 253
     456:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PB2);
     458:	85 b1       	in	r24, 0x05	; 5
     45a:	8b 7f       	andi	r24, 0xFB	; 251
     45c:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PB3);
     45e:	85 b1       	in	r24, 0x05	; 5
     460:	87 7f       	andi	r24, 0xF7	; 247
     462:	85 b9       	out	0x05, r24	; 5
				sendstr("dupa\n");
     464:	8d e1       	ldi	r24, 0x1D	; 29
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	0e 94 54 01 	call	0x2a8	; 0x2a8 <sendstr>
				
				DELAY_sec(10);
     46c:	8a e0       	ldi	r24, 0x0A	; 10
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 2f 01 	call	0x25e	; 0x25e <DELAY_sec>
				
				UART_Printf(" dupa\r\n");
     474:	83 e2       	ldi	r24, 0x23	; 35
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	9f 93       	push	r25
     47a:	8f 93       	push	r24
     47c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <UART_Printf>
				PORTB = (1 << PB1);
     480:	82 e0       	ldi	r24, 0x02	; 2
     482:	85 b9       	out	0x05, r24	; 5
				PORTB = (1 << PB2);
     484:	84 e0       	ldi	r24, 0x04	; 4
     486:	85 b9       	out	0x05, r24	; 5
				PORTB = (1 << PB3);
     488:	88 e0       	ldi	r24, 0x08	; 8
     48a:	85 b9       	out	0x05, r24	; 5
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	d2 cf       	rjmp	.-92     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			}
			else if(rxdata == 'b')
     492:	82 36       	cpi	r24, 0x62	; 98
     494:	a9 f5       	brne	.+106    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
			{
				
				//sendstr()
				moisture = (avs*100.00)/550.00;
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	48 ec       	ldi	r20, 0xC8	; 200
     49c:	52 e4       	ldi	r21, 0x42	; 66
     49e:	6b 2d       	mov	r22, r11
     4a0:	7a 2d       	mov	r23, r10
     4a2:	89 2d       	mov	r24, r9
     4a4:	98 2d       	mov	r25, r8
     4a6:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e8       	ldi	r19, 0x80	; 128
     4ae:	49 e0       	ldi	r20, 0x09	; 9
     4b0:	54 e4       	ldi	r21, 0x44	; 68
     4b2:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__divsf3>
				moisture_values = moisture;
				dtostrf(moisture_values,3,2,array);
     4b6:	9e 01       	movw	r18, r28
     4b8:	2f 5f       	subi	r18, 0xFF	; 255
     4ba:	3f 4f       	sbci	r19, 0xFF	; 255
     4bc:	39 01       	movw	r6, r18
     4be:	89 01       	movw	r16, r18
     4c0:	22 e0       	ldi	r18, 0x02	; 2
     4c2:	43 e0       	ldi	r20, 0x03	; 3
     4c4:	0e 94 3f 07 	call	0xe7e	; 0xe7e <dtostrf>
				//strcat(array,"%\n");
				UART_Printf(" %f\n",avs);
     4c8:	8f 92       	push	r8
     4ca:	9f 92       	push	r9
     4cc:	af 92       	push	r10
     4ce:	bf 92       	push	r11
     4d0:	8b e2       	ldi	r24, 0x2B	; 43
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	9f 93       	push	r25
     4d6:	8f 93       	push	r24
     4d8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <UART_Printf>
				DELAY_sec(15);
     4dc:	8f e0       	ldi	r24, 0x0F	; 15
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 2f 01 	call	0x25e	; 0x25e <DELAY_sec>
				//sendstr(array);
				UART_Printf(array);
     4e4:	7f 92       	push	r7
     4e6:	6f 92       	push	r6
     4e8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <UART_Printf>
				//UART_Printf("%f\n",avs);
				//set_sleep_mode(SLEEP_MODE_IDLE);
				DELAY_sec(15);
     4ec:	8f e0       	ldi	r24, 0x0F	; 15
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 2f 01 	call	0x25e	; 0x25e <DELAY_sec>
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	f8 94       	cli
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	9b cf       	rjmp	.-202    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
				//}
			}
			else if(rxdata == 'c')
     500:	83 36       	cpi	r24, 0x63	; 99
     502:	09 f0       	breq	.+2      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
     504:	52 c0       	rjmp	.+164    	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
     506:	25 c0       	rjmp	.+74     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
			{
				eeprom_address = 1;
				for(a = 0; a < 3; a++)
				{
					avs = make_measure();
     508:	0e 94 8a 01 	call	0x314	; 0x314 <make_measure>
					moisture = (avs*100.00)/550.00;
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	48 ec       	ldi	r20, 0xC8	; 200
     512:	52 e4       	ldi	r21, 0x42	; 66
     514:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e8       	ldi	r19, 0x80	; 128
     51c:	49 e0       	ldi	r20, 0x09	; 9
     51e:	54 e4       	ldi	r21, 0x44	; 68
     520:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__divsf3>
					moisture_values = moisture;
					dtostrf(moisture_values,3,2,array);
     524:	8e 01       	movw	r16, r28
     526:	0f 5f       	subi	r16, 0xFF	; 255
     528:	1f 4f       	sbci	r17, 0xFF	; 255
     52a:	22 e0       	ldi	r18, 0x02	; 2
     52c:	43 e0       	ldi	r20, 0x03	; 3
     52e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <dtostrf>
					
					if(a < 2)
     532:	92 e0       	ldi	r25, 0x02	; 2
     534:	e9 16       	cp	r14, r25
     536:	f1 04       	cpc	r15, r1
     538:	44 f4       	brge	.+16     	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
						{
							return_value[j] = array[i];
						}
						*/
						//return_value = {";18:03;09.01.22;00.00"};
						EEPROM_WriteString(eeprom_address, "23/02/22/12/01/00.00"); // Write the string at memoryLocation	0x00
     53a:	60 e3       	ldi	r22, 0x30	; 48
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	c5 01       	movw	r24, r10
     540:	0e 94 c8 01 	call	0x390	; 0x390 <EEPROM_WriteString>
						eeprom_address++;
     544:	2f ef       	ldi	r18, 0xFF	; 255
     546:	a2 1a       	sub	r10, r18
     548:	b2 0a       	sbc	r11, r18
				//}
			}
			else if(rxdata == 'c')
			{
				eeprom_address = 1;
				for(a = 0; a < 3; a++)
     54a:	3f ef       	ldi	r19, 0xFF	; 255
     54c:	e3 1a       	sub	r14, r19
     54e:	f3 0a       	sbc	r15, r19
     550:	05 c0       	rjmp	.+10     	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
     552:	aa 24       	eor	r10, r10
     554:	a3 94       	inc	r10
     556:	b1 2c       	mov	r11, r1
     558:	e1 2c       	mov	r14, r1
     55a:	f1 2c       	mov	r15, r1
     55c:	83 e0       	ldi	r24, 0x03	; 3
     55e:	e8 16       	cp	r14, r24
     560:	f1 04       	cpc	r15, r1
     562:	94 f2       	brlt	.-92     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
				
				eeprom_address = 1;
				
				//for(i = 0; i < 3; i++)
				//{
					EEPROM_ReadString(eeprom_address, return_value); // Read the string from memoryLocation 0x00
     564:	8e 01       	movw	r16, r28
     566:	0b 5f       	subi	r16, 0xFB	; 251
     568:	1f 4f       	sbci	r17, 0xFF	; 255
     56a:	b8 01       	movw	r22, r16
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 de 01 	call	0x3bc	; 0x3bc <EEPROM_ReadString>
					sendstr(return_value);
     574:	c8 01       	movw	r24, r16
     576:	0e 94 54 01 	call	0x2a8	; 0x2a8 <sendstr>
					DELAY_sec(15);
     57a:	8f e0       	ldi	r24, 0x0F	; 15
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 2f 01 	call	0x25e	; 0x25e <DELAY_sec>
					UART_Printf(" %s",return_value);
     582:	1f 93       	push	r17
     584:	0f 93       	push	r16
     586:	85 e4       	ldi	r24, 0x45	; 69
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	9f 93       	push	r25
     58c:	8f 93       	push	r24
     58e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <UART_Printf>
					//sendstr("\n");
					//eeprom_address++;
					DELAY_sec(15);
     592:	8f e0       	ldi	r24, 0x0F	; 15
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 2f 01 	call	0x25e	; 0x25e <DELAY_sec>
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
						EEPROM_WriteString(eeprom_address, "23/02/22/12/01/00.00"); // Write the string at memoryLocation	0x00
						eeprom_address++;
					}
				}
				
				eeprom_address = 1;
     5a2:	ee 24       	eor	r14, r14
     5a4:	e3 94       	inc	r14
     5a6:	f1 2c       	mov	r15, r1
     5a8:	46 cf       	rjmp	.-372    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
					//sendstr("\n");
					//eeprom_address++;
					DELAY_sec(15);
				//}				
			}
			else if(rxdata == 'd')
     5aa:	84 36       	cpi	r24, 0x64	; 100
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
     5ae:	43 cf       	rjmp	.-378    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     5b0:	29 c0       	rjmp	.+82     	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
				
				for(j = 0; j <= 5; j++)
				{
					for(i = 0; i <= 20; i++)
					{
						charr = return_value[i];
     5b2:	e5 e0       	ldi	r30, 0x05	; 5
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	ec 0f       	add	r30, r28
     5b8:	fd 1f       	adc	r31, r29
     5ba:	e0 0f       	add	r30, r16
     5bc:	f1 1f       	adc	r31, r17
     5be:	60 81       	ld	r22, Z
						EEPROM_WriteByte(eeprom_address,charr);
     5c0:	c7 01       	movw	r24, r14
     5c2:	0e 94 b3 01 	call	0x366	; 0x366 <EEPROM_WriteByte>
						//sendbyte(charr);
						eeprom_address++;
     5c6:	9f ef       	ldi	r25, 0xFF	; 255
     5c8:	e9 1a       	sub	r14, r25
     5ca:	f9 0a       	sbc	r15, r25
			{
				char charr;
				
				for(j = 0; j <= 5; j++)
				{
					for(i = 0; i <= 20; i++)
     5cc:	0f 5f       	subi	r16, 0xFF	; 255
     5ce:	1f 4f       	sbci	r17, 0xFF	; 255
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <__EEPROM_REGION_LENGTH__+0x1d6>
     5d2:	00 e0       	ldi	r16, 0x00	; 0
     5d4:	10 e0       	ldi	r17, 0x00	; 0
     5d6:	05 31       	cpi	r16, 0x15	; 21
     5d8:	11 05       	cpc	r17, r1
     5da:	5c f3       	brlt	.-42     	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
     5dc:	00 e0       	ldi	r16, 0x00	; 0
     5de:	10 e0       	ldi	r17, 0x00	; 0
     5e0:	0a c0       	rjmp	.+20     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
						eeprom_address++;
					}
				
					for(i = 0; i <= 20; i++)
					{
						charr = EEPROM_ReadByte(eeprom_address2);
     5e2:	c6 01       	movw	r24, r12
     5e4:	0e 94 bf 01 	call	0x37e	; 0x37e <EEPROM_ReadByte>
						sendbyte(charr);
     5e8:	0e 94 4d 01 	call	0x29a	; 0x29a <sendbyte>
						eeprom_address2++;
     5ec:	2f ef       	ldi	r18, 0xFF	; 255
     5ee:	c2 1a       	sub	r12, r18
     5f0:	d2 0a       	sbc	r13, r18
						EEPROM_WriteByte(eeprom_address,charr);
						//sendbyte(charr);
						eeprom_address++;
					}
				
					for(i = 0; i <= 20; i++)
     5f2:	0f 5f       	subi	r16, 0xFF	; 255
     5f4:	1f 4f       	sbci	r17, 0xFF	; 255
     5f6:	05 31       	cpi	r16, 0x15	; 21
     5f8:	11 05       	cpc	r17, r1
     5fa:	9c f3       	brlt	.-26     	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
			}
			else if(rxdata == 'd')
			{
				char charr;
				
				for(j = 0; j <= 5; j++)
     5fc:	3f ef       	ldi	r19, 0xFF	; 255
     5fe:	a3 1a       	sub	r10, r19
     600:	b3 0a       	sbc	r11, r19
     602:	02 c0       	rjmp	.+4      	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
     604:	a1 2c       	mov	r10, r1
     606:	b1 2c       	mov	r11, r1
     608:	86 e0       	ldi	r24, 0x06	; 6
     60a:	a8 16       	cp	r10, r24
     60c:	b1 04       	cpc	r11, r1
     60e:	0c f3       	brlt	.-62     	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
     610:	12 cf       	rjmp	.-476    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>

00000612 <UART_TxChar>:
            ptr_string[len]=ch; //copy the char into string and increment the index
            len++;
        }
	}
  return len;   
}
     612:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     616:	95 ff       	sbrs	r25, 5
     618:	fc cf       	rjmp	.-8      	; 0x612 <UART_TxChar>
     61a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     61e:	08 95       	ret

00000620 <UART_TxString>:
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	ec 01       	movw	r28, r24
     626:	03 c0       	rjmp	.+6      	; 0x62e <UART_TxString+0xe>
     628:	21 96       	adiw	r28, 0x01	; 1
     62a:	0e 94 09 03 	call	0x612	; 0x612 <UART_TxChar>
     62e:	88 81       	ld	r24, Y
     630:	81 11       	cpse	r24, r1
     632:	fa cf       	rjmp	.-12     	; 0x628 <UART_TxString+0x8>
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <UART_TxNumber>:
                8.(0x12AB,6) then 6-digits ie. 0012AB will be transmitted
                9.(0x12AB,C_DefaultDigitsToTransmit_U8) then 12AB will be transmitted.    
 ***************************************************************************************************/
#if ((Enable_UART_TxNumber==1) || (Enable_UART_TxFloatNumber==1) || (Enable_UART_Printf == 1))
void UART_TxNumber(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToTransmit_u8)
{
     63a:	4f 92       	push	r4
     63c:	5f 92       	push	r5
     63e:	6f 92       	push	r6
     640:	7f 92       	push	r7
     642:	af 92       	push	r10
     644:	bf 92       	push	r11
     646:	cf 92       	push	r12
     648:	df 92       	push	r13
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	2a 97       	sbiw	r28, 0x0a	; 10
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	de bf       	out	0x3e, r29	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	cd bf       	out	0x3d, r28	; 61
     666:	a8 2e       	mov	r10, r24
     668:	6a 01       	movw	r12, r20
     66a:	7b 01       	movw	r14, r22
     66c:	02 2f       	mov	r16, r18
    uint8_t i=0,a[10];

    if(C_BINARY_U8 == v_numericSystem_u8)
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	a8 12       	cpse	r10, r24
     672:	20 c0       	rjmp	.+64     	; 0x6b4 <UART_TxNumber+0x7a>
     674:	1c c0       	rjmp	.+56     	; 0x6ae <UART_TxNumber+0x74>
    {
        while(v_numOfDigitsToTransmit_u8!=0)
        {
            /* Start Extracting the bits from the specified bit positions.
             Get the Acsii values of the bits and transmit */
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToTransmit_u8-1));
     676:	80 2f       	mov	r24, r16
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	41 e0       	ldi	r20, 0x01	; 1
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	02 c0       	rjmp	.+4      	; 0x686 <UART_TxNumber+0x4c>
     682:	44 0f       	add	r20, r20
     684:	55 1f       	adc	r21, r21
     686:	8a 95       	dec	r24
     688:	e2 f7       	brpl	.-8      	; 0x682 <UART_TxNumber+0x48>
     68a:	05 2e       	mov	r0, r21
     68c:	00 0c       	add	r0, r0
     68e:	66 0b       	sbc	r22, r22
     690:	77 0b       	sbc	r23, r23
     692:	4c 21       	and	r20, r12
     694:	5d 21       	and	r21, r13
     696:	6e 21       	and	r22, r14
     698:	7f 21       	and	r23, r15
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	45 2b       	or	r20, r21
     69e:	46 2b       	or	r20, r22
     6a0:	47 2b       	or	r20, r23
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <UART_TxNumber+0x6c>
     6a4:	80 e0       	ldi	r24, 0x00	; 0
            UART_TxChar(util_Dec2Ascii(i));
     6a6:	80 5d       	subi	r24, 0xD0	; 208
     6a8:	0e 94 09 03 	call	0x612	; 0x612 <UART_TxChar>
            v_numOfDigitsToTransmit_u8--;
     6ac:	01 50       	subi	r16, 0x01	; 1
{
    uint8_t i=0,a[10];

    if(C_BINARY_U8 == v_numericSystem_u8)
    {
        while(v_numOfDigitsToTransmit_u8!=0)
     6ae:	01 11       	cpse	r16, r1
     6b0:	e2 cf       	rjmp	.-60     	; 0x676 <UART_TxNumber+0x3c>
     6b2:	52 c0       	rjmp	.+164    	; 0x758 <UART_TxNumber+0x11e>
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToTransmit_u8-1));
            UART_TxChar(util_Dec2Ascii(i));
            v_numOfDigitsToTransmit_u8--;
        }    
    }     
    else if(v_number_u32==0)
     6b4:	45 2b       	or	r20, r21
     6b6:	46 2b       	or	r20, r22
     6b8:	47 2b       	or	r20, r23
     6ba:	39 f0       	breq	.+14     	; 0x6ca <UART_TxNumber+0x90>
     6bc:	10 e0       	ldi	r17, 0x00	; 0
     6be:	35 c0       	rjmp	.+106    	; 0x72a <UART_TxNumber+0xf0>
    {
        /* If the number is zero then update the array with the same for transmitting */
        for(i=0;((i<v_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
            UART_TxChar('0');
     6c0:	80 e3       	ldi	r24, 0x30	; 48
     6c2:	0e 94 09 03 	call	0x612	; 0x612 <UART_TxChar>
        }    
    }     
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for transmitting */
        for(i=0;((i<v_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
     6c6:	1f 5f       	subi	r17, 0xFF	; 255
     6c8:	01 c0       	rjmp	.+2      	; 0x6cc <UART_TxNumber+0x92>
     6ca:	10 e0       	ldi	r17, 0x00	; 0
     6cc:	10 17       	cp	r17, r16
     6ce:	08 f0       	brcs	.+2      	; 0x6d2 <UART_TxNumber+0x98>
     6d0:	43 c0       	rjmp	.+134    	; 0x758 <UART_TxNumber+0x11e>
     6d2:	1a 30       	cpi	r17, 0x0A	; 10
     6d4:	a8 f3       	brcs	.-22     	; 0x6c0 <UART_TxNumber+0x86>
     6d6:	40 c0       	rjmp	.+128    	; 0x758 <UART_TxNumber+0x11e>
    {
        for(i=0;i<v_numOfDigitsToTransmit_u8;i++)
        {
            /* Continue extracting the digits from right side
               till the Specified v_numOfDigitsToTransmit_u8 */
            if(v_number_u32!=0)
     6d8:	c1 14       	cp	r12, r1
     6da:	d1 04       	cpc	r13, r1
     6dc:	e1 04       	cpc	r14, r1
     6de:	f1 04       	cpc	r15, r1
     6e0:	d1 f0       	breq	.+52     	; 0x716 <UART_TxNumber+0xdc>
                First get the remainder and divide the number by 10 each time.

                example for Decimal number:
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
     6e2:	bc 2c       	mov	r11, r12
     6e4:	4a 2c       	mov	r4, r10
     6e6:	51 2c       	mov	r5, r1
     6e8:	61 2c       	mov	r6, r1
     6ea:	71 2c       	mov	r7, r1
     6ec:	c7 01       	movw	r24, r14
     6ee:	b6 01       	movw	r22, r12
     6f0:	a3 01       	movw	r20, r6
     6f2:	92 01       	movw	r18, r4
     6f4:	0e 94 17 07 	call	0xe2e	; 0xe2e <__udivmodsi4>
     6f8:	c2 2e       	mov	r12, r18
     6fa:	d3 2e       	mov	r13, r19
     6fc:	e4 2e       	mov	r14, r20
     6fe:	f5 2e       	mov	r15, r21
     700:	e1 e0       	ldi	r30, 0x01	; 1
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	ec 0f       	add	r30, r28
     706:	fd 1f       	adc	r31, r29
     708:	e1 0f       	add	r30, r17
     70a:	f1 1d       	adc	r31, r1
     70c:	a2 9e       	mul	r10, r18
     70e:	b0 18       	sub	r11, r0
     710:	11 24       	eor	r1, r1
     712:	b0 82       	st	Z, r11
     714:	09 c0       	rjmp	.+18     	; 0x728 <UART_TxNumber+0xee>
                v_number_u32=v_number_u32/v_numericSystem_u8;
            }
            else if( (v_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
     716:	0b 30       	cpi	r16, 0x0B	; 11
     718:	e8 f4       	brcc	.+58     	; 0x754 <UART_TxNumber+0x11a>
            else
            {
                /*In case user expects more digits to be transmitted than the actual digits in number,
                  then update the remaining digits with zero.
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
     71a:	e1 e0       	ldi	r30, 0x01	; 1
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	ec 0f       	add	r30, r28
     720:	fd 1f       	adc	r31, r29
     722:	e1 0f       	add	r30, r17
     724:	f1 1d       	adc	r31, r1
     726:	10 82       	st	Z, r1
        for(i=0;((i<v_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
            UART_TxChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigitsToTransmit_u8;i++)
     728:	1f 5f       	subi	r17, 0xFF	; 255
     72a:	10 17       	cp	r17, r16
     72c:	a8 f2       	brcs	.-86     	; 0x6d8 <UART_TxNumber+0x9e>
     72e:	12 c0       	rjmp	.+36     	; 0x754 <UART_TxNumber+0x11a>
        }

        while(i)
        { 
            /* Finally get the ascii values of the digits and transmit*/
            UART_TxChar(util_Hex2Ascii(a[i-1]));
     730:	e1 2f       	mov	r30, r17
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	31 97       	sbiw	r30, 0x01	; 1
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	8c 0f       	add	r24, r28
     73c:	9d 1f       	adc	r25, r29
     73e:	e8 0f       	add	r30, r24
     740:	f9 1f       	adc	r31, r25
     742:	80 81       	ld	r24, Z
     744:	8a 30       	cpi	r24, 0x0A	; 10
     746:	10 f0       	brcs	.+4      	; 0x74c <UART_TxNumber+0x112>
     748:	89 5c       	subi	r24, 0xC9	; 201
     74a:	01 c0       	rjmp	.+2      	; 0x74e <UART_TxNumber+0x114>
     74c:	80 5d       	subi	r24, 0xD0	; 208
     74e:	0e 94 09 03 	call	0x612	; 0x612 <UART_TxChar>
            i--;
     752:	11 50       	subi	r17, 0x01	; 1
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
            }
        }

        while(i)
     754:	11 11       	cpse	r17, r1
     756:	ec cf       	rjmp	.-40     	; 0x730 <UART_TxNumber+0xf6>
            i--;
        }
    }


}
     758:	2a 96       	adiw	r28, 0x0a	; 10
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	de bf       	out	0x3e, r29	; 62
     760:	0f be       	out	0x3f, r0	; 63
     762:	cd bf       	out	0x3d, r28	; 61
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	df 90       	pop	r13
     772:	cf 90       	pop	r12
     774:	bf 90       	pop	r11
     776:	af 90       	pop	r10
     778:	7f 90       	pop	r7
     77a:	6f 90       	pop	r6
     77c:	5f 90       	pop	r5
     77e:	4f 90       	pop	r4
     780:	08 95       	ret

00000782 <UART_TxFloatNumber>:
         Float will be disabled by default as it takes huge controller resources
	     It can be enabled by changing value of Enable_UART_TxFloatNumber to 1 in uart.h	 
 ***************************************************************************************************/
#if (Enable_UART_TxFloatNumber==1)
void UART_TxFloatNumber(float v_floatNumber_f32)
{
     782:	8f 92       	push	r8
     784:	9f 92       	push	r9
     786:	af 92       	push	r10
     788:	bf 92       	push	r11
     78a:	cf 92       	push	r12
     78c:	df 92       	push	r13
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	6b 01       	movw	r12, r22
     794:	7c 01       	movw	r14, r24
      1.Type cast the number to int to get the integer part.
	  2.transmit the extracted integer part followed by a decimal point(.).
	  3.Later the integer part is made zero by subtracting with the extracted integer value.
	  4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */

	v_tempNumber_u32 = (uint32_t) v_floatNumber_f32;
     796:	0e 94 ed 05 	call	0xbda	; 0xbda <__fixunssfsi>
     79a:	4b 01       	movw	r8, r22
     79c:	5c 01       	movw	r10, r24
	UART_TxNumber(C_DECIMAL_U8,v_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
     79e:	2f ef       	ldi	r18, 0xFF	; 255
     7a0:	ab 01       	movw	r20, r22
     7a2:	bc 01       	movw	r22, r24
     7a4:	8a e0       	ldi	r24, 0x0A	; 10
     7a6:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_TxNumber>

	UART_TxChar('.');
     7aa:	8e e2       	ldi	r24, 0x2E	; 46
     7ac:	0e 94 09 03 	call	0x612	; 0x612 <UART_TxChar>

	v_floatNumber_f32 = v_floatNumber_f32 - v_tempNumber_u32;
     7b0:	c5 01       	movw	r24, r10
     7b2:	b4 01       	movw	r22, r8
     7b4:	0e 94 1c 06 	call	0xc38	; 0xc38 <__floatunsisf>
     7b8:	9b 01       	movw	r18, r22
     7ba:	ac 01       	movw	r20, r24
     7bc:	c7 01       	movw	r24, r14
     7be:	b6 01       	movw	r22, r12
     7c0:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__subsf3>
	v_tempNumber_u32 = v_floatNumber_f32 * 1000000;
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	34 e2       	ldi	r19, 0x24	; 36
     7c8:	44 e7       	ldi	r20, 0x74	; 116
     7ca:	59 e4       	ldi	r21, 0x49	; 73
     7cc:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
     7d0:	0e 94 ed 05 	call	0xbda	; 0xbda <__fixunssfsi>
     7d4:	ab 01       	movw	r20, r22
     7d6:	bc 01       	movw	r22, r24
	UART_TxNumber(C_DECIMAL_U8,v_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
     7d8:	2f ef       	ldi	r18, 0xFF	; 255
     7da:	8a e0       	ldi	r24, 0x0A	; 10
     7dc:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_TxNumber>
}
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	df 90       	pop	r13
     7e6:	cf 90       	pop	r12
     7e8:	bf 90       	pop	r11
     7ea:	af 90       	pop	r10
     7ec:	9f 90       	pop	r9
     7ee:	8f 90       	pop	r8
     7f0:	08 95       	ret

000007f2 <UART_Printf>:
        uint8_t v_Num_u8;
		UART_Printf("num1:%u",(uint16_t)v_Num_u8); 		 
***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(const char *argList, ...)
{
     7f2:	4f 92       	push	r4
     7f4:	5f 92       	push	r5
     7f6:	6f 92       	push	r6
     7f8:	7f 92       	push	r7
     7fa:	af 92       	push	r10
     7fc:	bf 92       	push	r11
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	1f 93       	push	r17
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	cd b7       	in	r28, 0x3d	; 61
     80a:	de b7       	in	r29, 0x3e	; 62
     80c:	fe 01       	movw	r30, r28
     80e:	3e 96       	adiw	r30, 0x0e	; 14
     810:	e1 90       	ld	r14, Z+
     812:	f1 90       	ld	r15, Z+
#if (Enable_UART_TxFloatNumber==1)
	double v_floatNum_f32;
#endif	


	va_start(argp, argList);
     814:	3f 01       	movw	r6, r30

	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
     816:	f2 c0       	rjmp	.+484    	; 0x9fc <__stack+0xfd>
	{

		ch= *ptr;
		if(ch == '%')         /*Check for '%' as there will be format specifier after it */
     818:	85 32       	cpi	r24, 0x25	; 37
     81a:	09 f0       	breq	.+2      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     81c:	ea c0       	rjmp	.+468    	; 0x9f2 <__stack+0xf3>
		{
		    ptr++;
     81e:	c7 01       	movw	r24, r14
     820:	01 96       	adiw	r24, 0x01	; 1
		    ch = *ptr;
     822:	d7 01       	movw	r26, r14
     824:	11 96       	adiw	r26, 0x01	; 1
     826:	ec 91       	ld	r30, X
		   if((ch>=0x30) && (ch<=0x39))
     828:	20 ed       	ldi	r18, 0xD0	; 208
     82a:	2e 0f       	add	r18, r30
     82c:	2a 30       	cpi	r18, 0x0A	; 10
     82e:	90 f0       	brcs	.+36     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
	{

		ch= *ptr;
		if(ch == '%')         /*Check for '%' as there will be format specifier after it */
		{
		    ptr++;
     830:	7c 01       	movw	r14, r24
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
     832:	1f ef       	ldi	r17, 0xFF	; 255
     834:	15 c0       	rjmp	.+42     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
		   if((ch>=0x30) && (ch<=0x39))
			{
			   v_numOfDigitsToTransmit_u8 = 0;
			   while((ch>=0x30) && (ch<=0x39))
			    {
				   v_numOfDigitsToTransmit_u8 = (v_numOfDigitsToTransmit_u8 * 10) + (ch-0x30);
     836:	81 2f       	mov	r24, r17
     838:	88 0f       	add	r24, r24
     83a:	98 2f       	mov	r25, r24
     83c:	99 0f       	add	r25, r25
     83e:	99 0f       	add	r25, r25
     840:	89 0f       	add	r24, r25
     842:	8e 0f       	add	r24, r30
     844:	10 ed       	ldi	r17, 0xD0	; 208
     846:	18 0f       	add	r17, r24
				   ptr++;
     848:	bf ef       	ldi	r27, 0xFF	; 255
     84a:	eb 1a       	sub	r14, r27
     84c:	fb 0a       	sbc	r15, r27
				   ch = *ptr;
     84e:	d7 01       	movw	r26, r14
     850:	ec 91       	ld	r30, X
     852:	02 c0       	rjmp	.+4      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     854:	7c 01       	movw	r14, r24
     856:	10 e0       	ldi	r17, 0x00	; 0
		    ptr++;
		    ch = *ptr;
		   if((ch>=0x30) && (ch<=0x39))
			{
			   v_numOfDigitsToTransmit_u8 = 0;
			   while((ch>=0x30) && (ch<=0x39))
     858:	80 ed       	ldi	r24, 0xD0	; 208
     85a:	8e 0f       	add	r24, r30
     85c:	8a 30       	cpi	r24, 0x0A	; 10
     85e:	58 f3       	brcs	.-42     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
     860:	8e 2f       	mov	r24, r30
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	fc 01       	movw	r30, r24
     866:	b5 97       	sbiw	r30, 0x25	; 37
     868:	e4 35       	cpi	r30, 0x54	; 84
     86a:	f1 05       	cpc	r31, r1
     86c:	08 f0       	brcs	.+2      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
     86e:	c3 c0       	rjmp	.+390    	; 0x9f6 <__stack+0xf7>
     870:	ec 5c       	subi	r30, 0xCC	; 204
     872:	ff 4f       	sbci	r31, 0xFF	; 255
     874:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__tablejump2__>
			{
			case 'C':
			case 'c':     /* Argument type is of char, hence read char data from the argp */
				ch = va_arg(argp, int);
     878:	53 01       	movw	r10, r6
     87a:	b2 e0       	ldi	r27, 0x02	; 2
     87c:	ab 0e       	add	r10, r27
     87e:	b1 1c       	adc	r11, r1
				UART_TxChar(ch);
     880:	f3 01       	movw	r30, r6
     882:	80 81       	ld	r24, Z
     884:	0e 94 09 03 	call	0x612	; 0x612 <UART_TxChar>

			switch(ch)       /* Decode the type of the argument */
			{
			case 'C':
			case 'c':     /* Argument type is of char, hence read char data from the argp */
				ch = va_arg(argp, int);
     888:	35 01       	movw	r6, r10
				UART_TxChar(ch);
				break;
     88a:	b5 c0       	rjmp	.+362    	; 0x9f6 <__stack+0xf7>

			case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
				v_num_s16 = va_arg(argp, sint16_t);
     88c:	53 01       	movw	r10, r6
     88e:	f2 e0       	ldi	r31, 0x02	; 2
     890:	af 0e       	add	r10, r31
     892:	b1 1c       	adc	r11, r1
     894:	d3 01       	movw	r26, r6
     896:	6d 90       	ld	r6, X+
     898:	7c 90       	ld	r7, X
				if(v_num_s16<0)
     89a:	77 20       	and	r7, r7
     89c:	34 f4       	brge	.+12     	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
				 { /* If the number is -ve then display the 2's complement along with '-' sign */ 
				   v_num_s16 = -v_num_s16;
     89e:	71 94       	neg	r7
     8a0:	61 94       	neg	r6
     8a2:	71 08       	sbc	r7, r1
				   UART_TxChar('-');
     8a4:	8d e2       	ldi	r24, 0x2D	; 45
     8a6:	0e 94 09 03 	call	0x612	; 0x612 <UART_TxChar>
				 }
				UART_TxNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToTransmit_u8);
     8aa:	a3 01       	movw	r20, r6
     8ac:	77 0c       	add	r7, r7
     8ae:	66 0b       	sbc	r22, r22
     8b0:	77 0b       	sbc	r23, r23
     8b2:	21 2f       	mov	r18, r17
     8b4:	8a e0       	ldi	r24, 0x0A	; 10
     8b6:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_TxNumber>
				ch = va_arg(argp, int);
				UART_TxChar(ch);
				break;

			case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
				v_num_s16 = va_arg(argp, sint16_t);
     8ba:	35 01       	movw	r6, r10
				 { /* If the number is -ve then display the 2's complement along with '-' sign */ 
				   v_num_s16 = -v_num_s16;
				   UART_TxChar('-');
				 }
				UART_TxNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToTransmit_u8);
				break;
     8bc:	9c c0       	rjmp	.+312    	; 0x9f6 <__stack+0xf7>
				
			case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
				v_num_s32 = va_arg(argp, sint32_t);				
     8be:	53 01       	movw	r10, r6
     8c0:	b4 e0       	ldi	r27, 0x04	; 4
     8c2:	ab 0e       	add	r10, r27
     8c4:	b1 1c       	adc	r11, r1
     8c6:	f3 01       	movw	r30, r6
     8c8:	40 80       	ld	r4, Z
     8ca:	51 80       	ldd	r5, Z+1	; 0x01
     8cc:	62 80       	ldd	r6, Z+2	; 0x02
     8ce:	73 80       	ldd	r7, Z+3	; 0x03
				if(v_num_s32<0)
     8d0:	77 20       	and	r7, r7
     8d2:	5c f4       	brge	.+22     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
				 { /* If the number is -ve then display the 2's complement along with '-' sign */
				   v_num_s32 = -v_num_s32;
     8d4:	70 94       	com	r7
     8d6:	60 94       	com	r6
     8d8:	50 94       	com	r5
     8da:	40 94       	com	r4
     8dc:	41 1c       	adc	r4, r1
     8de:	51 1c       	adc	r5, r1
     8e0:	61 1c       	adc	r6, r1
     8e2:	71 1c       	adc	r7, r1
				   UART_TxChar('-');
     8e4:	8d e2       	ldi	r24, 0x2D	; 45
     8e6:	0e 94 09 03 	call	0x612	; 0x612 <UART_TxChar>
				 }
				UART_TxNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToTransmit_u8);			
     8ea:	21 2f       	mov	r18, r17
     8ec:	b3 01       	movw	r22, r6
     8ee:	a2 01       	movw	r20, r4
     8f0:	8a e0       	ldi	r24, 0x0A	; 10
     8f2:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_TxNumber>
				 }
				UART_TxNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToTransmit_u8);
				break;
				
			case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
				v_num_s32 = va_arg(argp, sint32_t);				
     8f6:	35 01       	movw	r6, r10
				 { /* If the number is -ve then display the 2's complement along with '-' sign */
				   v_num_s32 = -v_num_s32;
				   UART_TxChar('-');
				 }
				UART_TxNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToTransmit_u8);			
				break;	
     8f8:	7e c0       	rjmp	.+252    	; 0x9f6 <__stack+0xf7>

			case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
				v_num_u16 = va_arg(argp, uint16_t);			
     8fa:	53 01       	movw	r10, r6
     8fc:	f2 e0       	ldi	r31, 0x02	; 2
     8fe:	af 0e       	add	r10, r31
     900:	b1 1c       	adc	r11, r1
     902:	d3 01       	movw	r26, r6
     904:	4d 91       	ld	r20, X+
     906:	5c 91       	ld	r21, X
				UART_TxNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToTransmit_u8);				
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	21 2f       	mov	r18, r17
     90e:	8a e0       	ldi	r24, 0x0A	; 10
     910:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_TxNumber>
				 }
				UART_TxNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToTransmit_u8);			
				break;	

			case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
				v_num_u16 = va_arg(argp, uint16_t);			
     914:	35 01       	movw	r6, r10
				UART_TxNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToTransmit_u8);				
				break;
     916:	6f c0       	rjmp	.+222    	; 0x9f6 <__stack+0xf7>
			
			case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
				v_num_u32 = va_arg(argp, uint32_t);			
     918:	53 01       	movw	r10, r6
     91a:	b4 e0       	ldi	r27, 0x04	; 4
     91c:	ab 0e       	add	r10, r27
     91e:	b1 1c       	adc	r11, r1
     920:	f3 01       	movw	r30, r6
     922:	40 81       	ld	r20, Z
     924:	51 81       	ldd	r21, Z+1	; 0x01
     926:	62 81       	ldd	r22, Z+2	; 0x02
     928:	73 81       	ldd	r23, Z+3	; 0x03
				UART_TxNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToTransmit_u8);				
     92a:	21 2f       	mov	r18, r17
     92c:	8a e0       	ldi	r24, 0x0A	; 10
     92e:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_TxNumber>
				v_num_u16 = va_arg(argp, uint16_t);			
				UART_TxNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToTransmit_u8);				
				break;
			
			case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
				v_num_u32 = va_arg(argp, uint32_t);			
     932:	35 01       	movw	r6, r10
				UART_TxNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToTransmit_u8);				
				break;			
     934:	60 c0       	rjmp	.+192    	; 0x9f6 <__stack+0xf7>

			case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
				v_num_u16 = va_arg(argp, uint16_t);				
     936:	53 01       	movw	r10, r6
     938:	f2 e0       	ldi	r31, 0x02	; 2
     93a:	af 0e       	add	r10, r31
     93c:	b1 1c       	adc	r11, r1
     93e:	d3 01       	movw	r26, r6
     940:	4d 91       	ld	r20, X+
     942:	5c 91       	ld	r21, X
				UART_TxNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToTransmit_u8);			
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	21 2f       	mov	r18, r17
     94a:	80 e1       	ldi	r24, 0x10	; 16
     94c:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_TxNumber>
				v_num_u32 = va_arg(argp, uint32_t);			
				UART_TxNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToTransmit_u8);				
				break;			

			case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
				v_num_u16 = va_arg(argp, uint16_t);				
     950:	35 01       	movw	r6, r10
				UART_TxNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToTransmit_u8);			
				break;
     952:	51 c0       	rjmp	.+162    	; 0x9f6 <__stack+0xf7>

			case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
				v_num_u32 = va_arg(argp, uint32_t);						
     954:	53 01       	movw	r10, r6
     956:	b4 e0       	ldi	r27, 0x04	; 4
     958:	ab 0e       	add	r10, r27
     95a:	b1 1c       	adc	r11, r1
     95c:	f3 01       	movw	r30, r6
     95e:	40 81       	ld	r20, Z
     960:	51 81       	ldd	r21, Z+1	; 0x01
     962:	62 81       	ldd	r22, Z+2	; 0x02
     964:	73 81       	ldd	r23, Z+3	; 0x03
				UART_TxNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToTransmit_u8);				
     966:	21 2f       	mov	r18, r17
     968:	80 e1       	ldi	r24, 0x10	; 16
     96a:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_TxNumber>
				v_num_u16 = va_arg(argp, uint16_t);				
				UART_TxNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToTransmit_u8);			
				break;

			case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
				v_num_u32 = va_arg(argp, uint32_t);						
     96e:	35 01       	movw	r6, r10
				UART_TxNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToTransmit_u8);				
				break;
     970:	42 c0       	rjmp	.+132    	; 0x9f6 <__stack+0xf7>

			
			case 'b':  /* Argument type is of binary,Read int and convert to binary */
				v_num_u16 = va_arg(argp, uint16_t);		
     972:	53 01       	movw	r10, r6
     974:	f2 e0       	ldi	r31, 0x02	; 2
     976:	af 0e       	add	r10, r31
     978:	b1 1c       	adc	r11, r1
     97a:	d3 01       	movw	r26, r6
     97c:	4d 91       	ld	r20, X+
     97e:	5c 91       	ld	r21, X
				
				if(v_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
     980:	1f 3f       	cpi	r17, 0xFF	; 255
     982:	09 f4       	brne	.+2      	; 0x986 <__stack+0x87>
				   v_numOfDigitsToTransmit_u8 = 16;
     984:	10 e1       	ldi	r17, 0x10	; 16
               
				UART_TxNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToTransmit_u8);			
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	21 2f       	mov	r18, r17
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_TxNumber>
				UART_TxNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToTransmit_u8);				
				break;

			
			case 'b':  /* Argument type is of binary,Read int and convert to binary */
				v_num_u16 = va_arg(argp, uint16_t);		
     992:	35 01       	movw	r6, r10
				
				if(v_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
				   v_numOfDigitsToTransmit_u8 = 16;
               
				UART_TxNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToTransmit_u8);			
				break;
     994:	30 c0       	rjmp	.+96     	; 0x9f6 <__stack+0xf7>

			case 'B':  /* Argument type is of binary,Read int and convert to binary */
				v_num_u32 = va_arg(argp, uint32_t);			
     996:	53 01       	movw	r10, r6
     998:	b4 e0       	ldi	r27, 0x04	; 4
     99a:	ab 0e       	add	r10, r27
     99c:	b1 1c       	adc	r11, r1
     99e:	f3 01       	movw	r30, r6
     9a0:	40 81       	ld	r20, Z
     9a2:	51 81       	ldd	r21, Z+1	; 0x01
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
                
				if(v_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
     9a8:	1f 3f       	cpi	r17, 0xFF	; 255
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__stack+0xaf>
				   v_numOfDigitsToTransmit_u8 = 32;		
     9ac:	10 e2       	ldi	r17, 0x20	; 32
               
				UART_TxNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToTransmit_u8);				
     9ae:	21 2f       	mov	r18, r17
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_TxNumber>
               
				UART_TxNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToTransmit_u8);			
				break;

			case 'B':  /* Argument type is of binary,Read int and convert to binary */
				v_num_u32 = va_arg(argp, uint32_t);			
     9b6:	35 01       	movw	r6, r10
                
				if(v_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
				   v_numOfDigitsToTransmit_u8 = 32;		
               
				UART_TxNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToTransmit_u8);				
				break;
     9b8:	1e c0       	rjmp	.+60     	; 0x9f6 <__stack+0xf7>


			case 'F':
			case 'f': /* Argument type is of float, hence read double data from the argp */
#if (Enable_UART_TxFloatNumber==1)				
				v_floatNum_f32 = va_arg(argp, double);				
     9ba:	53 01       	movw	r10, r6
     9bc:	f4 e0       	ldi	r31, 0x04	; 4
     9be:	af 0e       	add	r10, r31
     9c0:	b1 1c       	adc	r11, r1
     9c2:	d3 01       	movw	r26, r6
     9c4:	6d 91       	ld	r22, X+
     9c6:	7d 91       	ld	r23, X+
     9c8:	8d 91       	ld	r24, X+
     9ca:	9c 91       	ld	r25, X
				UART_TxFloatNumber(v_floatNum_f32);
     9cc:	0e 94 c1 03 	call	0x782	; 0x782 <UART_TxFloatNumber>


			case 'F':
			case 'f': /* Argument type is of float, hence read double data from the argp */
#if (Enable_UART_TxFloatNumber==1)				
				v_floatNum_f32 = va_arg(argp, double);				
     9d0:	35 01       	movw	r6, r10
				UART_TxFloatNumber(v_floatNum_f32);
#endif            
				break;                
     9d2:	11 c0       	rjmp	.+34     	; 0x9f6 <__stack+0xf7>


			case 'S':
			case 's': /* Argument type is of string, hence get the pointer to sting passed */
				str = va_arg(argp, char *);
     9d4:	53 01       	movw	r10, r6
     9d6:	b2 e0       	ldi	r27, 0x02	; 2
     9d8:	ab 0e       	add	r10, r27
     9da:	b1 1c       	adc	r11, r1
				UART_TxString(str);			
     9dc:	f3 01       	movw	r30, r6
     9de:	80 81       	ld	r24, Z
     9e0:	91 81       	ldd	r25, Z+1	; 0x01
     9e2:	0e 94 10 03 	call	0x620	; 0x620 <UART_TxString>
				break;                


			case 'S':
			case 's': /* Argument type is of string, hence get the pointer to sting passed */
				str = va_arg(argp, char *);
     9e6:	35 01       	movw	r6, r10
				UART_TxString(str);			
				break;
     9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <__stack+0xf7>

			case '%':
				UART_TxChar('%');
     9ea:	85 e2       	ldi	r24, 0x25	; 37
     9ec:	0e 94 09 03 	call	0x612	; 0x612 <UART_TxChar>
				break;
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <__stack+0xf7>
			}
		}
		else
		{
			/* As '%' is not detected transmit the char passed */
			UART_TxChar(ch);
     9f2:	0e 94 09 03 	call	0x612	; 0x612 <UART_TxChar>


	va_start(argp, argList);

	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
     9f6:	ff ef       	ldi	r31, 0xFF	; 255
     9f8:	ef 1a       	sub	r14, r31
     9fa:	ff 0a       	sbc	r15, r31
     9fc:	d7 01       	movw	r26, r14
     9fe:	8c 91       	ld	r24, X
     a00:	81 11       	cpse	r24, r1
     a02:	0a cf       	rjmp	.-492    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
			UART_TxChar(ch);
		}
	}

	va_end(argp);
}
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	ff 90       	pop	r15
     a0c:	ef 90       	pop	r14
     a0e:	bf 90       	pop	r11
     a10:	af 90       	pop	r10
     a12:	7f 90       	pop	r7
     a14:	6f 90       	pop	r6
     a16:	5f 90       	pop	r5
     a18:	4f 90       	pop	r4
     a1a:	08 95       	ret

00000a1c <__subsf3>:
     a1c:	50 58       	subi	r21, 0x80	; 128

00000a1e <__addsf3>:
     a1e:	bb 27       	eor	r27, r27
     a20:	aa 27       	eor	r26, r26
     a22:	0e 94 26 05 	call	0xa4c	; 0xa4c <__addsf3x>
     a26:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_round>
     a2a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_pscA>
     a2e:	38 f0       	brcs	.+14     	; 0xa3e <__addsf3+0x20>
     a30:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_pscB>
     a34:	20 f0       	brcs	.+8      	; 0xa3e <__addsf3+0x20>
     a36:	39 f4       	brne	.+14     	; 0xa46 <__addsf3+0x28>
     a38:	9f 3f       	cpi	r25, 0xFF	; 255
     a3a:	19 f4       	brne	.+6      	; 0xa42 <__addsf3+0x24>
     a3c:	26 f4       	brtc	.+8      	; 0xa46 <__addsf3+0x28>
     a3e:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_nan>
     a42:	0e f4       	brtc	.+2      	; 0xa46 <__addsf3+0x28>
     a44:	e0 95       	com	r30
     a46:	e7 fb       	bst	r30, 7
     a48:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_inf>

00000a4c <__addsf3x>:
     a4c:	e9 2f       	mov	r30, r25
     a4e:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_split3>
     a52:	58 f3       	brcs	.-42     	; 0xa2a <__addsf3+0xc>
     a54:	ba 17       	cp	r27, r26
     a56:	62 07       	cpc	r22, r18
     a58:	73 07       	cpc	r23, r19
     a5a:	84 07       	cpc	r24, r20
     a5c:	95 07       	cpc	r25, r21
     a5e:	20 f0       	brcs	.+8      	; 0xa68 <__addsf3x+0x1c>
     a60:	79 f4       	brne	.+30     	; 0xa80 <__addsf3x+0x34>
     a62:	a6 f5       	brtc	.+104    	; 0xacc <__addsf3x+0x80>
     a64:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__fp_zero>
     a68:	0e f4       	brtc	.+2      	; 0xa6c <__addsf3x+0x20>
     a6a:	e0 95       	com	r30
     a6c:	0b 2e       	mov	r0, r27
     a6e:	ba 2f       	mov	r27, r26
     a70:	a0 2d       	mov	r26, r0
     a72:	0b 01       	movw	r0, r22
     a74:	b9 01       	movw	r22, r18
     a76:	90 01       	movw	r18, r0
     a78:	0c 01       	movw	r0, r24
     a7a:	ca 01       	movw	r24, r20
     a7c:	a0 01       	movw	r20, r0
     a7e:	11 24       	eor	r1, r1
     a80:	ff 27       	eor	r31, r31
     a82:	59 1b       	sub	r21, r25
     a84:	99 f0       	breq	.+38     	; 0xaac <__addsf3x+0x60>
     a86:	59 3f       	cpi	r21, 0xF9	; 249
     a88:	50 f4       	brcc	.+20     	; 0xa9e <__addsf3x+0x52>
     a8a:	50 3e       	cpi	r21, 0xE0	; 224
     a8c:	68 f1       	brcs	.+90     	; 0xae8 <__addsf3x+0x9c>
     a8e:	1a 16       	cp	r1, r26
     a90:	f0 40       	sbci	r31, 0x00	; 0
     a92:	a2 2f       	mov	r26, r18
     a94:	23 2f       	mov	r18, r19
     a96:	34 2f       	mov	r19, r20
     a98:	44 27       	eor	r20, r20
     a9a:	58 5f       	subi	r21, 0xF8	; 248
     a9c:	f3 cf       	rjmp	.-26     	; 0xa84 <__addsf3x+0x38>
     a9e:	46 95       	lsr	r20
     aa0:	37 95       	ror	r19
     aa2:	27 95       	ror	r18
     aa4:	a7 95       	ror	r26
     aa6:	f0 40       	sbci	r31, 0x00	; 0
     aa8:	53 95       	inc	r21
     aaa:	c9 f7       	brne	.-14     	; 0xa9e <__addsf3x+0x52>
     aac:	7e f4       	brtc	.+30     	; 0xacc <__addsf3x+0x80>
     aae:	1f 16       	cp	r1, r31
     ab0:	ba 0b       	sbc	r27, r26
     ab2:	62 0b       	sbc	r22, r18
     ab4:	73 0b       	sbc	r23, r19
     ab6:	84 0b       	sbc	r24, r20
     ab8:	ba f0       	brmi	.+46     	; 0xae8 <__addsf3x+0x9c>
     aba:	91 50       	subi	r25, 0x01	; 1
     abc:	a1 f0       	breq	.+40     	; 0xae6 <__addsf3x+0x9a>
     abe:	ff 0f       	add	r31, r31
     ac0:	bb 1f       	adc	r27, r27
     ac2:	66 1f       	adc	r22, r22
     ac4:	77 1f       	adc	r23, r23
     ac6:	88 1f       	adc	r24, r24
     ac8:	c2 f7       	brpl	.-16     	; 0xaba <__addsf3x+0x6e>
     aca:	0e c0       	rjmp	.+28     	; 0xae8 <__addsf3x+0x9c>
     acc:	ba 0f       	add	r27, r26
     ace:	62 1f       	adc	r22, r18
     ad0:	73 1f       	adc	r23, r19
     ad2:	84 1f       	adc	r24, r20
     ad4:	48 f4       	brcc	.+18     	; 0xae8 <__addsf3x+0x9c>
     ad6:	87 95       	ror	r24
     ad8:	77 95       	ror	r23
     ada:	67 95       	ror	r22
     adc:	b7 95       	ror	r27
     ade:	f7 95       	ror	r31
     ae0:	9e 3f       	cpi	r25, 0xFE	; 254
     ae2:	08 f0       	brcs	.+2      	; 0xae6 <__addsf3x+0x9a>
     ae4:	b0 cf       	rjmp	.-160    	; 0xa46 <__addsf3+0x28>
     ae6:	93 95       	inc	r25
     ae8:	88 0f       	add	r24, r24
     aea:	08 f0       	brcs	.+2      	; 0xaee <__addsf3x+0xa2>
     aec:	99 27       	eor	r25, r25
     aee:	ee 0f       	add	r30, r30
     af0:	97 95       	ror	r25
     af2:	87 95       	ror	r24
     af4:	08 95       	ret

00000af6 <__divsf3>:
     af6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__divsf3x>
     afa:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_round>
     afe:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_pscB>
     b02:	58 f0       	brcs	.+22     	; 0xb1a <__divsf3+0x24>
     b04:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_pscA>
     b08:	40 f0       	brcs	.+16     	; 0xb1a <__divsf3+0x24>
     b0a:	29 f4       	brne	.+10     	; 0xb16 <__divsf3+0x20>
     b0c:	5f 3f       	cpi	r21, 0xFF	; 255
     b0e:	29 f0       	breq	.+10     	; 0xb1a <__divsf3+0x24>
     b10:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_inf>
     b14:	51 11       	cpse	r21, r1
     b16:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__fp_szero>
     b1a:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_nan>

00000b1e <__divsf3x>:
     b1e:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_split3>
     b22:	68 f3       	brcs	.-38     	; 0xafe <__divsf3+0x8>

00000b24 <__divsf3_pse>:
     b24:	99 23       	and	r25, r25
     b26:	b1 f3       	breq	.-20     	; 0xb14 <__divsf3+0x1e>
     b28:	55 23       	and	r21, r21
     b2a:	91 f3       	breq	.-28     	; 0xb10 <__divsf3+0x1a>
     b2c:	95 1b       	sub	r25, r21
     b2e:	55 0b       	sbc	r21, r21
     b30:	bb 27       	eor	r27, r27
     b32:	aa 27       	eor	r26, r26
     b34:	62 17       	cp	r22, r18
     b36:	73 07       	cpc	r23, r19
     b38:	84 07       	cpc	r24, r20
     b3a:	38 f0       	brcs	.+14     	; 0xb4a <__divsf3_pse+0x26>
     b3c:	9f 5f       	subi	r25, 0xFF	; 255
     b3e:	5f 4f       	sbci	r21, 0xFF	; 255
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	aa 1f       	adc	r26, r26
     b48:	a9 f3       	breq	.-22     	; 0xb34 <__divsf3_pse+0x10>
     b4a:	35 d0       	rcall	.+106    	; 0xbb6 <__divsf3_pse+0x92>
     b4c:	0e 2e       	mov	r0, r30
     b4e:	3a f0       	brmi	.+14     	; 0xb5e <__divsf3_pse+0x3a>
     b50:	e0 e8       	ldi	r30, 0x80	; 128
     b52:	32 d0       	rcall	.+100    	; 0xbb8 <__divsf3_pse+0x94>
     b54:	91 50       	subi	r25, 0x01	; 1
     b56:	50 40       	sbci	r21, 0x00	; 0
     b58:	e6 95       	lsr	r30
     b5a:	00 1c       	adc	r0, r0
     b5c:	ca f7       	brpl	.-14     	; 0xb50 <__divsf3_pse+0x2c>
     b5e:	2b d0       	rcall	.+86     	; 0xbb6 <__divsf3_pse+0x92>
     b60:	fe 2f       	mov	r31, r30
     b62:	29 d0       	rcall	.+82     	; 0xbb6 <__divsf3_pse+0x92>
     b64:	66 0f       	add	r22, r22
     b66:	77 1f       	adc	r23, r23
     b68:	88 1f       	adc	r24, r24
     b6a:	bb 1f       	adc	r27, r27
     b6c:	26 17       	cp	r18, r22
     b6e:	37 07       	cpc	r19, r23
     b70:	48 07       	cpc	r20, r24
     b72:	ab 07       	cpc	r26, r27
     b74:	b0 e8       	ldi	r27, 0x80	; 128
     b76:	09 f0       	breq	.+2      	; 0xb7a <__divsf3_pse+0x56>
     b78:	bb 0b       	sbc	r27, r27
     b7a:	80 2d       	mov	r24, r0
     b7c:	bf 01       	movw	r22, r30
     b7e:	ff 27       	eor	r31, r31
     b80:	93 58       	subi	r25, 0x83	; 131
     b82:	5f 4f       	sbci	r21, 0xFF	; 255
     b84:	3a f0       	brmi	.+14     	; 0xb94 <__divsf3_pse+0x70>
     b86:	9e 3f       	cpi	r25, 0xFE	; 254
     b88:	51 05       	cpc	r21, r1
     b8a:	78 f0       	brcs	.+30     	; 0xbaa <__divsf3_pse+0x86>
     b8c:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_inf>
     b90:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__fp_szero>
     b94:	5f 3f       	cpi	r21, 0xFF	; 255
     b96:	e4 f3       	brlt	.-8      	; 0xb90 <__divsf3_pse+0x6c>
     b98:	98 3e       	cpi	r25, 0xE8	; 232
     b9a:	d4 f3       	brlt	.-12     	; 0xb90 <__divsf3_pse+0x6c>
     b9c:	86 95       	lsr	r24
     b9e:	77 95       	ror	r23
     ba0:	67 95       	ror	r22
     ba2:	b7 95       	ror	r27
     ba4:	f7 95       	ror	r31
     ba6:	9f 5f       	subi	r25, 0xFF	; 255
     ba8:	c9 f7       	brne	.-14     	; 0xb9c <__divsf3_pse+0x78>
     baa:	88 0f       	add	r24, r24
     bac:	91 1d       	adc	r25, r1
     bae:	96 95       	lsr	r25
     bb0:	87 95       	ror	r24
     bb2:	97 f9       	bld	r25, 7
     bb4:	08 95       	ret
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	66 0f       	add	r22, r22
     bba:	77 1f       	adc	r23, r23
     bbc:	88 1f       	adc	r24, r24
     bbe:	bb 1f       	adc	r27, r27
     bc0:	62 17       	cp	r22, r18
     bc2:	73 07       	cpc	r23, r19
     bc4:	84 07       	cpc	r24, r20
     bc6:	ba 07       	cpc	r27, r26
     bc8:	20 f0       	brcs	.+8      	; 0xbd2 <__divsf3_pse+0xae>
     bca:	62 1b       	sub	r22, r18
     bcc:	73 0b       	sbc	r23, r19
     bce:	84 0b       	sbc	r24, r20
     bd0:	ba 0b       	sbc	r27, r26
     bd2:	ee 1f       	adc	r30, r30
     bd4:	88 f7       	brcc	.-30     	; 0xbb8 <__divsf3_pse+0x94>
     bd6:	e0 95       	com	r30
     bd8:	08 95       	ret

00000bda <__fixunssfsi>:
     bda:	0e 94 89 06 	call	0xd12	; 0xd12 <__fp_splitA>
     bde:	88 f0       	brcs	.+34     	; 0xc02 <__fixunssfsi+0x28>
     be0:	9f 57       	subi	r25, 0x7F	; 127
     be2:	98 f0       	brcs	.+38     	; 0xc0a <__fixunssfsi+0x30>
     be4:	b9 2f       	mov	r27, r25
     be6:	99 27       	eor	r25, r25
     be8:	b7 51       	subi	r27, 0x17	; 23
     bea:	b0 f0       	brcs	.+44     	; 0xc18 <__fixunssfsi+0x3e>
     bec:	e1 f0       	breq	.+56     	; 0xc26 <__fixunssfsi+0x4c>
     bee:	66 0f       	add	r22, r22
     bf0:	77 1f       	adc	r23, r23
     bf2:	88 1f       	adc	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	1a f0       	brmi	.+6      	; 0xbfe <__fixunssfsi+0x24>
     bf8:	ba 95       	dec	r27
     bfa:	c9 f7       	brne	.-14     	; 0xbee <__fixunssfsi+0x14>
     bfc:	14 c0       	rjmp	.+40     	; 0xc26 <__fixunssfsi+0x4c>
     bfe:	b1 30       	cpi	r27, 0x01	; 1
     c00:	91 f0       	breq	.+36     	; 0xc26 <__fixunssfsi+0x4c>
     c02:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fp_zero>
     c06:	b1 e0       	ldi	r27, 0x01	; 1
     c08:	08 95       	ret
     c0a:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__fp_zero>
     c0e:	67 2f       	mov	r22, r23
     c10:	78 2f       	mov	r23, r24
     c12:	88 27       	eor	r24, r24
     c14:	b8 5f       	subi	r27, 0xF8	; 248
     c16:	39 f0       	breq	.+14     	; 0xc26 <__fixunssfsi+0x4c>
     c18:	b9 3f       	cpi	r27, 0xF9	; 249
     c1a:	cc f3       	brlt	.-14     	; 0xc0e <__fixunssfsi+0x34>
     c1c:	86 95       	lsr	r24
     c1e:	77 95       	ror	r23
     c20:	67 95       	ror	r22
     c22:	b3 95       	inc	r27
     c24:	d9 f7       	brne	.-10     	; 0xc1c <__fixunssfsi+0x42>
     c26:	3e f4       	brtc	.+14     	; 0xc36 <__fixunssfsi+0x5c>
     c28:	90 95       	com	r25
     c2a:	80 95       	com	r24
     c2c:	70 95       	com	r23
     c2e:	61 95       	neg	r22
     c30:	7f 4f       	sbci	r23, 0xFF	; 255
     c32:	8f 4f       	sbci	r24, 0xFF	; 255
     c34:	9f 4f       	sbci	r25, 0xFF	; 255
     c36:	08 95       	ret

00000c38 <__floatunsisf>:
     c38:	e8 94       	clt
     c3a:	09 c0       	rjmp	.+18     	; 0xc4e <__floatsisf+0x12>

00000c3c <__floatsisf>:
     c3c:	97 fb       	bst	r25, 7
     c3e:	3e f4       	brtc	.+14     	; 0xc4e <__floatsisf+0x12>
     c40:	90 95       	com	r25
     c42:	80 95       	com	r24
     c44:	70 95       	com	r23
     c46:	61 95       	neg	r22
     c48:	7f 4f       	sbci	r23, 0xFF	; 255
     c4a:	8f 4f       	sbci	r24, 0xFF	; 255
     c4c:	9f 4f       	sbci	r25, 0xFF	; 255
     c4e:	99 23       	and	r25, r25
     c50:	a9 f0       	breq	.+42     	; 0xc7c <__floatsisf+0x40>
     c52:	f9 2f       	mov	r31, r25
     c54:	96 e9       	ldi	r25, 0x96	; 150
     c56:	bb 27       	eor	r27, r27
     c58:	93 95       	inc	r25
     c5a:	f6 95       	lsr	r31
     c5c:	87 95       	ror	r24
     c5e:	77 95       	ror	r23
     c60:	67 95       	ror	r22
     c62:	b7 95       	ror	r27
     c64:	f1 11       	cpse	r31, r1
     c66:	f8 cf       	rjmp	.-16     	; 0xc58 <__floatsisf+0x1c>
     c68:	fa f4       	brpl	.+62     	; 0xca8 <__floatsisf+0x6c>
     c6a:	bb 0f       	add	r27, r27
     c6c:	11 f4       	brne	.+4      	; 0xc72 <__floatsisf+0x36>
     c6e:	60 ff       	sbrs	r22, 0
     c70:	1b c0       	rjmp	.+54     	; 0xca8 <__floatsisf+0x6c>
     c72:	6f 5f       	subi	r22, 0xFF	; 255
     c74:	7f 4f       	sbci	r23, 0xFF	; 255
     c76:	8f 4f       	sbci	r24, 0xFF	; 255
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	16 c0       	rjmp	.+44     	; 0xca8 <__floatsisf+0x6c>
     c7c:	88 23       	and	r24, r24
     c7e:	11 f0       	breq	.+4      	; 0xc84 <__floatsisf+0x48>
     c80:	96 e9       	ldi	r25, 0x96	; 150
     c82:	11 c0       	rjmp	.+34     	; 0xca6 <__floatsisf+0x6a>
     c84:	77 23       	and	r23, r23
     c86:	21 f0       	breq	.+8      	; 0xc90 <__floatsisf+0x54>
     c88:	9e e8       	ldi	r25, 0x8E	; 142
     c8a:	87 2f       	mov	r24, r23
     c8c:	76 2f       	mov	r23, r22
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__floatsisf+0x5e>
     c90:	66 23       	and	r22, r22
     c92:	71 f0       	breq	.+28     	; 0xcb0 <__floatsisf+0x74>
     c94:	96 e8       	ldi	r25, 0x86	; 134
     c96:	86 2f       	mov	r24, r22
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	2a f0       	brmi	.+10     	; 0xca8 <__floatsisf+0x6c>
     c9e:	9a 95       	dec	r25
     ca0:	66 0f       	add	r22, r22
     ca2:	77 1f       	adc	r23, r23
     ca4:	88 1f       	adc	r24, r24
     ca6:	da f7       	brpl	.-10     	; 0xc9e <__floatsisf+0x62>
     ca8:	88 0f       	add	r24, r24
     caa:	96 95       	lsr	r25
     cac:	87 95       	ror	r24
     cae:	97 f9       	bld	r25, 7
     cb0:	08 95       	ret

00000cb2 <__fp_inf>:
     cb2:	97 f9       	bld	r25, 7
     cb4:	9f 67       	ori	r25, 0x7F	; 127
     cb6:	80 e8       	ldi	r24, 0x80	; 128
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	08 95       	ret

00000cbe <__fp_nan>:
     cbe:	9f ef       	ldi	r25, 0xFF	; 255
     cc0:	80 ec       	ldi	r24, 0xC0	; 192
     cc2:	08 95       	ret

00000cc4 <__fp_pscA>:
     cc4:	00 24       	eor	r0, r0
     cc6:	0a 94       	dec	r0
     cc8:	16 16       	cp	r1, r22
     cca:	17 06       	cpc	r1, r23
     ccc:	18 06       	cpc	r1, r24
     cce:	09 06       	cpc	r0, r25
     cd0:	08 95       	ret

00000cd2 <__fp_pscB>:
     cd2:	00 24       	eor	r0, r0
     cd4:	0a 94       	dec	r0
     cd6:	12 16       	cp	r1, r18
     cd8:	13 06       	cpc	r1, r19
     cda:	14 06       	cpc	r1, r20
     cdc:	05 06       	cpc	r0, r21
     cde:	08 95       	ret

00000ce0 <__fp_round>:
     ce0:	09 2e       	mov	r0, r25
     ce2:	03 94       	inc	r0
     ce4:	00 0c       	add	r0, r0
     ce6:	11 f4       	brne	.+4      	; 0xcec <__fp_round+0xc>
     ce8:	88 23       	and	r24, r24
     cea:	52 f0       	brmi	.+20     	; 0xd00 <__fp_round+0x20>
     cec:	bb 0f       	add	r27, r27
     cee:	40 f4       	brcc	.+16     	; 0xd00 <__fp_round+0x20>
     cf0:	bf 2b       	or	r27, r31
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <__fp_round+0x18>
     cf4:	60 ff       	sbrs	r22, 0
     cf6:	04 c0       	rjmp	.+8      	; 0xd00 <__fp_round+0x20>
     cf8:	6f 5f       	subi	r22, 0xFF	; 255
     cfa:	7f 4f       	sbci	r23, 0xFF	; 255
     cfc:	8f 4f       	sbci	r24, 0xFF	; 255
     cfe:	9f 4f       	sbci	r25, 0xFF	; 255
     d00:	08 95       	ret

00000d02 <__fp_split3>:
     d02:	57 fd       	sbrc	r21, 7
     d04:	90 58       	subi	r25, 0x80	; 128
     d06:	44 0f       	add	r20, r20
     d08:	55 1f       	adc	r21, r21
     d0a:	59 f0       	breq	.+22     	; 0xd22 <__fp_splitA+0x10>
     d0c:	5f 3f       	cpi	r21, 0xFF	; 255
     d0e:	71 f0       	breq	.+28     	; 0xd2c <__fp_splitA+0x1a>
     d10:	47 95       	ror	r20

00000d12 <__fp_splitA>:
     d12:	88 0f       	add	r24, r24
     d14:	97 fb       	bst	r25, 7
     d16:	99 1f       	adc	r25, r25
     d18:	61 f0       	breq	.+24     	; 0xd32 <__fp_splitA+0x20>
     d1a:	9f 3f       	cpi	r25, 0xFF	; 255
     d1c:	79 f0       	breq	.+30     	; 0xd3c <__fp_splitA+0x2a>
     d1e:	87 95       	ror	r24
     d20:	08 95       	ret
     d22:	12 16       	cp	r1, r18
     d24:	13 06       	cpc	r1, r19
     d26:	14 06       	cpc	r1, r20
     d28:	55 1f       	adc	r21, r21
     d2a:	f2 cf       	rjmp	.-28     	; 0xd10 <__fp_split3+0xe>
     d2c:	46 95       	lsr	r20
     d2e:	f1 df       	rcall	.-30     	; 0xd12 <__fp_splitA>
     d30:	08 c0       	rjmp	.+16     	; 0xd42 <__fp_splitA+0x30>
     d32:	16 16       	cp	r1, r22
     d34:	17 06       	cpc	r1, r23
     d36:	18 06       	cpc	r1, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	f1 cf       	rjmp	.-30     	; 0xd1e <__fp_splitA+0xc>
     d3c:	86 95       	lsr	r24
     d3e:	71 05       	cpc	r23, r1
     d40:	61 05       	cpc	r22, r1
     d42:	08 94       	sec
     d44:	08 95       	ret

00000d46 <__fp_zero>:
     d46:	e8 94       	clt

00000d48 <__fp_szero>:
     d48:	bb 27       	eor	r27, r27
     d4a:	66 27       	eor	r22, r22
     d4c:	77 27       	eor	r23, r23
     d4e:	cb 01       	movw	r24, r22
     d50:	97 f9       	bld	r25, 7
     d52:	08 95       	ret

00000d54 <__mulsf3>:
     d54:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3x>
     d58:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_round>
     d5c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_pscA>
     d60:	38 f0       	brcs	.+14     	; 0xd70 <__mulsf3+0x1c>
     d62:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_pscB>
     d66:	20 f0       	brcs	.+8      	; 0xd70 <__mulsf3+0x1c>
     d68:	95 23       	and	r25, r21
     d6a:	11 f0       	breq	.+4      	; 0xd70 <__mulsf3+0x1c>
     d6c:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_inf>
     d70:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_nan>
     d74:	11 24       	eor	r1, r1
     d76:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__fp_szero>

00000d7a <__mulsf3x>:
     d7a:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_split3>
     d7e:	70 f3       	brcs	.-36     	; 0xd5c <__mulsf3+0x8>

00000d80 <__mulsf3_pse>:
     d80:	95 9f       	mul	r25, r21
     d82:	c1 f3       	breq	.-16     	; 0xd74 <__mulsf3+0x20>
     d84:	95 0f       	add	r25, r21
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	55 1f       	adc	r21, r21
     d8a:	62 9f       	mul	r22, r18
     d8c:	f0 01       	movw	r30, r0
     d8e:	72 9f       	mul	r23, r18
     d90:	bb 27       	eor	r27, r27
     d92:	f0 0d       	add	r31, r0
     d94:	b1 1d       	adc	r27, r1
     d96:	63 9f       	mul	r22, r19
     d98:	aa 27       	eor	r26, r26
     d9a:	f0 0d       	add	r31, r0
     d9c:	b1 1d       	adc	r27, r1
     d9e:	aa 1f       	adc	r26, r26
     da0:	64 9f       	mul	r22, r20
     da2:	66 27       	eor	r22, r22
     da4:	b0 0d       	add	r27, r0
     da6:	a1 1d       	adc	r26, r1
     da8:	66 1f       	adc	r22, r22
     daa:	82 9f       	mul	r24, r18
     dac:	22 27       	eor	r18, r18
     dae:	b0 0d       	add	r27, r0
     db0:	a1 1d       	adc	r26, r1
     db2:	62 1f       	adc	r22, r18
     db4:	73 9f       	mul	r23, r19
     db6:	b0 0d       	add	r27, r0
     db8:	a1 1d       	adc	r26, r1
     dba:	62 1f       	adc	r22, r18
     dbc:	83 9f       	mul	r24, r19
     dbe:	a0 0d       	add	r26, r0
     dc0:	61 1d       	adc	r22, r1
     dc2:	22 1f       	adc	r18, r18
     dc4:	74 9f       	mul	r23, r20
     dc6:	33 27       	eor	r19, r19
     dc8:	a0 0d       	add	r26, r0
     dca:	61 1d       	adc	r22, r1
     dcc:	23 1f       	adc	r18, r19
     dce:	84 9f       	mul	r24, r20
     dd0:	60 0d       	add	r22, r0
     dd2:	21 1d       	adc	r18, r1
     dd4:	82 2f       	mov	r24, r18
     dd6:	76 2f       	mov	r23, r22
     dd8:	6a 2f       	mov	r22, r26
     dda:	11 24       	eor	r1, r1
     ddc:	9f 57       	subi	r25, 0x7F	; 127
     dde:	50 40       	sbci	r21, 0x00	; 0
     de0:	9a f0       	brmi	.+38     	; 0xe08 <__mulsf3_pse+0x88>
     de2:	f1 f0       	breq	.+60     	; 0xe20 <__mulsf3_pse+0xa0>
     de4:	88 23       	and	r24, r24
     de6:	4a f0       	brmi	.+18     	; 0xdfa <__mulsf3_pse+0x7a>
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	bb 1f       	adc	r27, r27
     dee:	66 1f       	adc	r22, r22
     df0:	77 1f       	adc	r23, r23
     df2:	88 1f       	adc	r24, r24
     df4:	91 50       	subi	r25, 0x01	; 1
     df6:	50 40       	sbci	r21, 0x00	; 0
     df8:	a9 f7       	brne	.-22     	; 0xde4 <__mulsf3_pse+0x64>
     dfa:	9e 3f       	cpi	r25, 0xFE	; 254
     dfc:	51 05       	cpc	r21, r1
     dfe:	80 f0       	brcs	.+32     	; 0xe20 <__mulsf3_pse+0xa0>
     e00:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_inf>
     e04:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__fp_szero>
     e08:	5f 3f       	cpi	r21, 0xFF	; 255
     e0a:	e4 f3       	brlt	.-8      	; 0xe04 <__mulsf3_pse+0x84>
     e0c:	98 3e       	cpi	r25, 0xE8	; 232
     e0e:	d4 f3       	brlt	.-12     	; 0xe04 <__mulsf3_pse+0x84>
     e10:	86 95       	lsr	r24
     e12:	77 95       	ror	r23
     e14:	67 95       	ror	r22
     e16:	b7 95       	ror	r27
     e18:	f7 95       	ror	r31
     e1a:	e7 95       	ror	r30
     e1c:	9f 5f       	subi	r25, 0xFF	; 255
     e1e:	c1 f7       	brne	.-16     	; 0xe10 <__mulsf3_pse+0x90>
     e20:	fe 2b       	or	r31, r30
     e22:	88 0f       	add	r24, r24
     e24:	91 1d       	adc	r25, r1
     e26:	96 95       	lsr	r25
     e28:	87 95       	ror	r24
     e2a:	97 f9       	bld	r25, 7
     e2c:	08 95       	ret

00000e2e <__udivmodsi4>:
     e2e:	a1 e2       	ldi	r26, 0x21	; 33
     e30:	1a 2e       	mov	r1, r26
     e32:	aa 1b       	sub	r26, r26
     e34:	bb 1b       	sub	r27, r27
     e36:	fd 01       	movw	r30, r26
     e38:	0d c0       	rjmp	.+26     	; 0xe54 <__udivmodsi4_ep>

00000e3a <__udivmodsi4_loop>:
     e3a:	aa 1f       	adc	r26, r26
     e3c:	bb 1f       	adc	r27, r27
     e3e:	ee 1f       	adc	r30, r30
     e40:	ff 1f       	adc	r31, r31
     e42:	a2 17       	cp	r26, r18
     e44:	b3 07       	cpc	r27, r19
     e46:	e4 07       	cpc	r30, r20
     e48:	f5 07       	cpc	r31, r21
     e4a:	20 f0       	brcs	.+8      	; 0xe54 <__udivmodsi4_ep>
     e4c:	a2 1b       	sub	r26, r18
     e4e:	b3 0b       	sbc	r27, r19
     e50:	e4 0b       	sbc	r30, r20
     e52:	f5 0b       	sbc	r31, r21

00000e54 <__udivmodsi4_ep>:
     e54:	66 1f       	adc	r22, r22
     e56:	77 1f       	adc	r23, r23
     e58:	88 1f       	adc	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	1a 94       	dec	r1
     e5e:	69 f7       	brne	.-38     	; 0xe3a <__udivmodsi4_loop>
     e60:	60 95       	com	r22
     e62:	70 95       	com	r23
     e64:	80 95       	com	r24
     e66:	90 95       	com	r25
     e68:	9b 01       	movw	r18, r22
     e6a:	ac 01       	movw	r20, r24
     e6c:	bd 01       	movw	r22, r26
     e6e:	cf 01       	movw	r24, r30
     e70:	08 95       	ret

00000e72 <__tablejump2__>:
     e72:	ee 0f       	add	r30, r30
     e74:	ff 1f       	adc	r31, r31
     e76:	05 90       	lpm	r0, Z+
     e78:	f4 91       	lpm	r31, Z
     e7a:	e0 2d       	mov	r30, r0
     e7c:	09 94       	ijmp

00000e7e <dtostrf>:
     e7e:	ef 92       	push	r14
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	e8 01       	movw	r28, r16
     e8a:	47 fd       	sbrc	r20, 7
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <dtostrf+0x14>
     e8e:	34 e0       	ldi	r19, 0x04	; 4
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <dtostrf+0x16>
     e92:	34 e1       	ldi	r19, 0x14	; 20
     e94:	04 2e       	mov	r0, r20
     e96:	00 0c       	add	r0, r0
     e98:	55 0b       	sbc	r21, r21
     e9a:	57 ff       	sbrs	r21, 7
     e9c:	03 c0       	rjmp	.+6      	; 0xea4 <dtostrf+0x26>
     e9e:	51 95       	neg	r21
     ea0:	41 95       	neg	r20
     ea2:	51 09       	sbc	r21, r1
     ea4:	e3 2e       	mov	r14, r19
     ea6:	02 2f       	mov	r16, r18
     ea8:	24 2f       	mov	r18, r20
     eaa:	ae 01       	movw	r20, r28
     eac:	0e 94 5f 07 	call	0xebe	; 0xebe <dtoa_prf>
     eb0:	ce 01       	movw	r24, r28
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	ef 90       	pop	r14
     ebc:	08 95       	ret

00000ebe <dtoa_prf>:
     ebe:	a9 e0       	ldi	r26, 0x09	; 9
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e5 e6       	ldi	r30, 0x65	; 101
     ec4:	f7 e0       	ldi	r31, 0x07	; 7
     ec6:	0c 94 97 09 	jmp	0x132e	; 0x132e <__prologue_saves__+0xc>
     eca:	6a 01       	movw	r12, r20
     ecc:	12 2f       	mov	r17, r18
     ece:	b0 2e       	mov	r11, r16
     ed0:	2b e3       	ldi	r18, 0x3B	; 59
     ed2:	20 17       	cp	r18, r16
     ed4:	20 f0       	brcs	.+8      	; 0xede <dtoa_prf+0x20>
     ed6:	ff 24       	eor	r15, r15
     ed8:	f3 94       	inc	r15
     eda:	f0 0e       	add	r15, r16
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <dtoa_prf+0x24>
     ede:	2c e3       	ldi	r18, 0x3C	; 60
     ee0:	f2 2e       	mov	r15, r18
     ee2:	0f 2d       	mov	r16, r15
     ee4:	27 e0       	ldi	r18, 0x07	; 7
     ee6:	ae 01       	movw	r20, r28
     ee8:	4f 5f       	subi	r20, 0xFF	; 255
     eea:	5f 4f       	sbci	r21, 0xFF	; 255
     eec:	0e 94 b9 08 	call	0x1172	; 0x1172 <__ftoa_engine>
     ef0:	bc 01       	movw	r22, r24
     ef2:	49 81       	ldd	r20, Y+1	; 0x01
     ef4:	84 2f       	mov	r24, r20
     ef6:	89 70       	andi	r24, 0x09	; 9
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	31 f0       	breq	.+12     	; 0xf08 <dtoa_prf+0x4a>
     efc:	e1 fc       	sbrc	r14, 1
     efe:	06 c0       	rjmp	.+12     	; 0xf0c <dtoa_prf+0x4e>
     f00:	e0 fe       	sbrs	r14, 0
     f02:	06 c0       	rjmp	.+12     	; 0xf10 <dtoa_prf+0x52>
     f04:	90 e2       	ldi	r25, 0x20	; 32
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <dtoa_prf+0x54>
     f08:	9d e2       	ldi	r25, 0x2D	; 45
     f0a:	03 c0       	rjmp	.+6      	; 0xf12 <dtoa_prf+0x54>
     f0c:	9b e2       	ldi	r25, 0x2B	; 43
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <dtoa_prf+0x54>
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	5e 2d       	mov	r21, r14
     f14:	50 71       	andi	r21, 0x10	; 16
     f16:	43 ff       	sbrs	r20, 3
     f18:	3c c0       	rjmp	.+120    	; 0xf92 <dtoa_prf+0xd4>
     f1a:	91 11       	cpse	r25, r1
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <dtoa_prf+0x64>
     f1e:	83 e0       	ldi	r24, 0x03	; 3
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <dtoa_prf+0x66>
     f22:	84 e0       	ldi	r24, 0x04	; 4
     f24:	81 17       	cp	r24, r17
     f26:	18 f4       	brcc	.+6      	; 0xf2e <dtoa_prf+0x70>
     f28:	21 2f       	mov	r18, r17
     f2a:	28 1b       	sub	r18, r24
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <dtoa_prf+0x72>
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	51 11       	cpse	r21, r1
     f32:	0b c0       	rjmp	.+22     	; 0xf4a <dtoa_prf+0x8c>
     f34:	f6 01       	movw	r30, r12
     f36:	82 2f       	mov	r24, r18
     f38:	30 e2       	ldi	r19, 0x20	; 32
     f3a:	88 23       	and	r24, r24
     f3c:	19 f0       	breq	.+6      	; 0xf44 <dtoa_prf+0x86>
     f3e:	31 93       	st	Z+, r19
     f40:	81 50       	subi	r24, 0x01	; 1
     f42:	fb cf       	rjmp	.-10     	; 0xf3a <dtoa_prf+0x7c>
     f44:	c2 0e       	add	r12, r18
     f46:	d1 1c       	adc	r13, r1
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	99 23       	and	r25, r25
     f4c:	29 f0       	breq	.+10     	; 0xf58 <dtoa_prf+0x9a>
     f4e:	d6 01       	movw	r26, r12
     f50:	9c 93       	st	X, r25
     f52:	f6 01       	movw	r30, r12
     f54:	31 96       	adiw	r30, 0x01	; 1
     f56:	6f 01       	movw	r12, r30
     f58:	c6 01       	movw	r24, r12
     f5a:	03 96       	adiw	r24, 0x03	; 3
     f5c:	e2 fe       	sbrs	r14, 2
     f5e:	0a c0       	rjmp	.+20     	; 0xf74 <dtoa_prf+0xb6>
     f60:	3e e4       	ldi	r19, 0x4E	; 78
     f62:	d6 01       	movw	r26, r12
     f64:	3c 93       	st	X, r19
     f66:	41 e4       	ldi	r20, 0x41	; 65
     f68:	11 96       	adiw	r26, 0x01	; 1
     f6a:	4c 93       	st	X, r20
     f6c:	11 97       	sbiw	r26, 0x01	; 1
     f6e:	12 96       	adiw	r26, 0x02	; 2
     f70:	3c 93       	st	X, r19
     f72:	06 c0       	rjmp	.+12     	; 0xf80 <dtoa_prf+0xc2>
     f74:	3e e6       	ldi	r19, 0x6E	; 110
     f76:	f6 01       	movw	r30, r12
     f78:	30 83       	st	Z, r19
     f7a:	41 e6       	ldi	r20, 0x61	; 97
     f7c:	41 83       	std	Z+1, r20	; 0x01
     f7e:	32 83       	std	Z+2, r19	; 0x02
     f80:	fc 01       	movw	r30, r24
     f82:	32 2f       	mov	r19, r18
     f84:	40 e2       	ldi	r20, 0x20	; 32
     f86:	33 23       	and	r19, r19
     f88:	09 f4       	brne	.+2      	; 0xf8c <dtoa_prf+0xce>
     f8a:	42 c0       	rjmp	.+132    	; 0x1010 <dtoa_prf+0x152>
     f8c:	41 93       	st	Z+, r20
     f8e:	31 50       	subi	r19, 0x01	; 1
     f90:	fa cf       	rjmp	.-12     	; 0xf86 <dtoa_prf+0xc8>
     f92:	42 ff       	sbrs	r20, 2
     f94:	44 c0       	rjmp	.+136    	; 0x101e <dtoa_prf+0x160>
     f96:	91 11       	cpse	r25, r1
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <dtoa_prf+0xe0>
     f9a:	83 e0       	ldi	r24, 0x03	; 3
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <dtoa_prf+0xe2>
     f9e:	84 e0       	ldi	r24, 0x04	; 4
     fa0:	81 17       	cp	r24, r17
     fa2:	18 f4       	brcc	.+6      	; 0xfaa <dtoa_prf+0xec>
     fa4:	21 2f       	mov	r18, r17
     fa6:	28 1b       	sub	r18, r24
     fa8:	01 c0       	rjmp	.+2      	; 0xfac <dtoa_prf+0xee>
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	51 11       	cpse	r21, r1
     fae:	0b c0       	rjmp	.+22     	; 0xfc6 <dtoa_prf+0x108>
     fb0:	f6 01       	movw	r30, r12
     fb2:	82 2f       	mov	r24, r18
     fb4:	30 e2       	ldi	r19, 0x20	; 32
     fb6:	88 23       	and	r24, r24
     fb8:	19 f0       	breq	.+6      	; 0xfc0 <dtoa_prf+0x102>
     fba:	31 93       	st	Z+, r19
     fbc:	81 50       	subi	r24, 0x01	; 1
     fbe:	fb cf       	rjmp	.-10     	; 0xfb6 <dtoa_prf+0xf8>
     fc0:	c2 0e       	add	r12, r18
     fc2:	d1 1c       	adc	r13, r1
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	99 23       	and	r25, r25
     fc8:	29 f0       	breq	.+10     	; 0xfd4 <dtoa_prf+0x116>
     fca:	d6 01       	movw	r26, r12
     fcc:	9c 93       	st	X, r25
     fce:	f6 01       	movw	r30, r12
     fd0:	31 96       	adiw	r30, 0x01	; 1
     fd2:	6f 01       	movw	r12, r30
     fd4:	c6 01       	movw	r24, r12
     fd6:	03 96       	adiw	r24, 0x03	; 3
     fd8:	e2 fe       	sbrs	r14, 2
     fda:	0b c0       	rjmp	.+22     	; 0xff2 <dtoa_prf+0x134>
     fdc:	39 e4       	ldi	r19, 0x49	; 73
     fde:	d6 01       	movw	r26, r12
     fe0:	3c 93       	st	X, r19
     fe2:	3e e4       	ldi	r19, 0x4E	; 78
     fe4:	11 96       	adiw	r26, 0x01	; 1
     fe6:	3c 93       	st	X, r19
     fe8:	11 97       	sbiw	r26, 0x01	; 1
     fea:	36 e4       	ldi	r19, 0x46	; 70
     fec:	12 96       	adiw	r26, 0x02	; 2
     fee:	3c 93       	st	X, r19
     ff0:	07 c0       	rjmp	.+14     	; 0x1000 <dtoa_prf+0x142>
     ff2:	39 e6       	ldi	r19, 0x69	; 105
     ff4:	f6 01       	movw	r30, r12
     ff6:	30 83       	st	Z, r19
     ff8:	3e e6       	ldi	r19, 0x6E	; 110
     ffa:	31 83       	std	Z+1, r19	; 0x01
     ffc:	36 e6       	ldi	r19, 0x66	; 102
     ffe:	32 83       	std	Z+2, r19	; 0x02
    1000:	fc 01       	movw	r30, r24
    1002:	32 2f       	mov	r19, r18
    1004:	40 e2       	ldi	r20, 0x20	; 32
    1006:	33 23       	and	r19, r19
    1008:	19 f0       	breq	.+6      	; 0x1010 <dtoa_prf+0x152>
    100a:	41 93       	st	Z+, r20
    100c:	31 50       	subi	r19, 0x01	; 1
    100e:	fb cf       	rjmp	.-10     	; 0x1006 <dtoa_prf+0x148>
    1010:	fc 01       	movw	r30, r24
    1012:	e2 0f       	add	r30, r18
    1014:	f1 1d       	adc	r31, r1
    1016:	10 82       	st	Z, r1
    1018:	8e ef       	ldi	r24, 0xFE	; 254
    101a:	9f ef       	ldi	r25, 0xFF	; 255
    101c:	a6 c0       	rjmp	.+332    	; 0x116a <dtoa_prf+0x2ac>
    101e:	21 e0       	ldi	r18, 0x01	; 1
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	91 11       	cpse	r25, r1
    1024:	02 c0       	rjmp	.+4      	; 0x102a <dtoa_prf+0x16c>
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	16 16       	cp	r1, r22
    102c:	17 06       	cpc	r1, r23
    102e:	1c f4       	brge	.+6      	; 0x1036 <dtoa_prf+0x178>
    1030:	fb 01       	movw	r30, r22
    1032:	31 96       	adiw	r30, 0x01	; 1
    1034:	02 c0       	rjmp	.+4      	; 0x103a <dtoa_prf+0x17c>
    1036:	e1 e0       	ldi	r30, 0x01	; 1
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	2e 0f       	add	r18, r30
    103c:	3f 1f       	adc	r19, r31
    103e:	bb 20       	and	r11, r11
    1040:	21 f0       	breq	.+8      	; 0x104a <dtoa_prf+0x18c>
    1042:	eb 2d       	mov	r30, r11
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	31 96       	adiw	r30, 0x01	; 1
    1048:	02 c0       	rjmp	.+4      	; 0x104e <dtoa_prf+0x190>
    104a:	e0 e0       	ldi	r30, 0x00	; 0
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	2e 0f       	add	r18, r30
    1050:	3f 1f       	adc	r19, r31
    1052:	e1 2f       	mov	r30, r17
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	2e 17       	cp	r18, r30
    1058:	3f 07       	cpc	r19, r31
    105a:	1c f4       	brge	.+6      	; 0x1062 <dtoa_prf+0x1a4>
    105c:	12 1b       	sub	r17, r18
    105e:	21 2f       	mov	r18, r17
    1060:	01 c0       	rjmp	.+2      	; 0x1064 <dtoa_prf+0x1a6>
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	8e 2d       	mov	r24, r14
    1066:	88 71       	andi	r24, 0x18	; 24
    1068:	59 f4       	brne	.+22     	; 0x1080 <dtoa_prf+0x1c2>
    106a:	f6 01       	movw	r30, r12
    106c:	82 2f       	mov	r24, r18
    106e:	30 e2       	ldi	r19, 0x20	; 32
    1070:	88 23       	and	r24, r24
    1072:	19 f0       	breq	.+6      	; 0x107a <dtoa_prf+0x1bc>
    1074:	31 93       	st	Z+, r19
    1076:	81 50       	subi	r24, 0x01	; 1
    1078:	fb cf       	rjmp	.-10     	; 0x1070 <dtoa_prf+0x1b2>
    107a:	c2 0e       	add	r12, r18
    107c:	d1 1c       	adc	r13, r1
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	99 23       	and	r25, r25
    1082:	29 f0       	breq	.+10     	; 0x108e <dtoa_prf+0x1d0>
    1084:	d6 01       	movw	r26, r12
    1086:	9c 93       	st	X, r25
    1088:	f6 01       	movw	r30, r12
    108a:	31 96       	adiw	r30, 0x01	; 1
    108c:	6f 01       	movw	r12, r30
    108e:	51 11       	cpse	r21, r1
    1090:	0b c0       	rjmp	.+22     	; 0x10a8 <dtoa_prf+0x1ea>
    1092:	f6 01       	movw	r30, r12
    1094:	82 2f       	mov	r24, r18
    1096:	90 e3       	ldi	r25, 0x30	; 48
    1098:	88 23       	and	r24, r24
    109a:	19 f0       	breq	.+6      	; 0x10a2 <dtoa_prf+0x1e4>
    109c:	91 93       	st	Z+, r25
    109e:	81 50       	subi	r24, 0x01	; 1
    10a0:	fb cf       	rjmp	.-10     	; 0x1098 <dtoa_prf+0x1da>
    10a2:	c2 0e       	add	r12, r18
    10a4:	d1 1c       	adc	r13, r1
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	0f 2d       	mov	r16, r15
    10aa:	06 0f       	add	r16, r22
    10ac:	9a 81       	ldd	r25, Y+2	; 0x02
    10ae:	34 2f       	mov	r19, r20
    10b0:	30 71       	andi	r19, 0x10	; 16
    10b2:	44 ff       	sbrs	r20, 4
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <dtoa_prf+0x1fe>
    10b6:	91 33       	cpi	r25, 0x31	; 49
    10b8:	09 f4       	brne	.+2      	; 0x10bc <dtoa_prf+0x1fe>
    10ba:	01 50       	subi	r16, 0x01	; 1
    10bc:	10 16       	cp	r1, r16
    10be:	24 f4       	brge	.+8      	; 0x10c8 <dtoa_prf+0x20a>
    10c0:	09 30       	cpi	r16, 0x09	; 9
    10c2:	18 f0       	brcs	.+6      	; 0x10ca <dtoa_prf+0x20c>
    10c4:	08 e0       	ldi	r16, 0x08	; 8
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <dtoa_prf+0x20c>
    10c8:	01 e0       	ldi	r16, 0x01	; 1
    10ca:	ab 01       	movw	r20, r22
    10cc:	77 ff       	sbrs	r23, 7
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <dtoa_prf+0x216>
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	fb 01       	movw	r30, r22
    10d6:	e4 1b       	sub	r30, r20
    10d8:	f5 0b       	sbc	r31, r21
    10da:	a1 e0       	ldi	r26, 0x01	; 1
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	ac 0f       	add	r26, r28
    10e0:	bd 1f       	adc	r27, r29
    10e2:	ea 0f       	add	r30, r26
    10e4:	fb 1f       	adc	r31, r27
    10e6:	8e e2       	ldi	r24, 0x2E	; 46
    10e8:	a8 2e       	mov	r10, r24
    10ea:	4b 01       	movw	r8, r22
    10ec:	80 1a       	sub	r8, r16
    10ee:	91 08       	sbc	r9, r1
    10f0:	0b 2d       	mov	r16, r11
    10f2:	10 e0       	ldi	r17, 0x00	; 0
    10f4:	11 95       	neg	r17
    10f6:	01 95       	neg	r16
    10f8:	11 09       	sbc	r17, r1
    10fa:	4f 3f       	cpi	r20, 0xFF	; 255
    10fc:	bf ef       	ldi	r27, 0xFF	; 255
    10fe:	5b 07       	cpc	r21, r27
    1100:	21 f4       	brne	.+8      	; 0x110a <dtoa_prf+0x24c>
    1102:	d6 01       	movw	r26, r12
    1104:	ac 92       	st	X, r10
    1106:	11 96       	adiw	r26, 0x01	; 1
    1108:	6d 01       	movw	r12, r26
    110a:	64 17       	cp	r22, r20
    110c:	75 07       	cpc	r23, r21
    110e:	2c f0       	brlt	.+10     	; 0x111a <dtoa_prf+0x25c>
    1110:	84 16       	cp	r8, r20
    1112:	95 06       	cpc	r9, r21
    1114:	14 f4       	brge	.+4      	; 0x111a <dtoa_prf+0x25c>
    1116:	81 81       	ldd	r24, Z+1	; 0x01
    1118:	01 c0       	rjmp	.+2      	; 0x111c <dtoa_prf+0x25e>
    111a:	80 e3       	ldi	r24, 0x30	; 48
    111c:	41 50       	subi	r20, 0x01	; 1
    111e:	51 09       	sbc	r21, r1
    1120:	31 96       	adiw	r30, 0x01	; 1
    1122:	d6 01       	movw	r26, r12
    1124:	11 96       	adiw	r26, 0x01	; 1
    1126:	7d 01       	movw	r14, r26
    1128:	40 17       	cp	r20, r16
    112a:	51 07       	cpc	r21, r17
    112c:	24 f0       	brlt	.+8      	; 0x1136 <dtoa_prf+0x278>
    112e:	d6 01       	movw	r26, r12
    1130:	8c 93       	st	X, r24
    1132:	67 01       	movw	r12, r14
    1134:	e2 cf       	rjmp	.-60     	; 0x10fa <dtoa_prf+0x23c>
    1136:	64 17       	cp	r22, r20
    1138:	75 07       	cpc	r23, r21
    113a:	39 f4       	brne	.+14     	; 0x114a <dtoa_prf+0x28c>
    113c:	96 33       	cpi	r25, 0x36	; 54
    113e:	20 f4       	brcc	.+8      	; 0x1148 <dtoa_prf+0x28a>
    1140:	95 33       	cpi	r25, 0x35	; 53
    1142:	19 f4       	brne	.+6      	; 0x114a <dtoa_prf+0x28c>
    1144:	31 11       	cpse	r19, r1
    1146:	01 c0       	rjmp	.+2      	; 0x114a <dtoa_prf+0x28c>
    1148:	81 e3       	ldi	r24, 0x31	; 49
    114a:	f6 01       	movw	r30, r12
    114c:	80 83       	st	Z, r24
    114e:	f7 01       	movw	r30, r14
    1150:	82 2f       	mov	r24, r18
    1152:	90 e2       	ldi	r25, 0x20	; 32
    1154:	88 23       	and	r24, r24
    1156:	19 f0       	breq	.+6      	; 0x115e <dtoa_prf+0x2a0>
    1158:	91 93       	st	Z+, r25
    115a:	81 50       	subi	r24, 0x01	; 1
    115c:	fb cf       	rjmp	.-10     	; 0x1154 <dtoa_prf+0x296>
    115e:	f7 01       	movw	r30, r14
    1160:	e2 0f       	add	r30, r18
    1162:	f1 1d       	adc	r31, r1
    1164:	10 82       	st	Z, r1
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	29 96       	adiw	r28, 0x09	; 9
    116c:	ec e0       	ldi	r30, 0x0C	; 12
    116e:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__epilogue_restores__+0xc>

00001172 <__ftoa_engine>:
    1172:	28 30       	cpi	r18, 0x08	; 8
    1174:	08 f0       	brcs	.+2      	; 0x1178 <__ftoa_engine+0x6>
    1176:	27 e0       	ldi	r18, 0x07	; 7
    1178:	33 27       	eor	r19, r19
    117a:	da 01       	movw	r26, r20
    117c:	99 0f       	add	r25, r25
    117e:	31 1d       	adc	r19, r1
    1180:	87 fd       	sbrc	r24, 7
    1182:	91 60       	ori	r25, 0x01	; 1
    1184:	00 96       	adiw	r24, 0x00	; 0
    1186:	61 05       	cpc	r22, r1
    1188:	71 05       	cpc	r23, r1
    118a:	39 f4       	brne	.+14     	; 0x119a <__ftoa_engine+0x28>
    118c:	32 60       	ori	r19, 0x02	; 2
    118e:	2e 5f       	subi	r18, 0xFE	; 254
    1190:	3d 93       	st	X+, r19
    1192:	30 e3       	ldi	r19, 0x30	; 48
    1194:	2a 95       	dec	r18
    1196:	e1 f7       	brne	.-8      	; 0x1190 <__ftoa_engine+0x1e>
    1198:	08 95       	ret
    119a:	9f 3f       	cpi	r25, 0xFF	; 255
    119c:	30 f0       	brcs	.+12     	; 0x11aa <__ftoa_engine+0x38>
    119e:	80 38       	cpi	r24, 0x80	; 128
    11a0:	71 05       	cpc	r23, r1
    11a2:	61 05       	cpc	r22, r1
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <__ftoa_engine+0x36>
    11a6:	3c 5f       	subi	r19, 0xFC	; 252
    11a8:	3c 5f       	subi	r19, 0xFC	; 252
    11aa:	3d 93       	st	X+, r19
    11ac:	91 30       	cpi	r25, 0x01	; 1
    11ae:	08 f0       	brcs	.+2      	; 0x11b2 <__ftoa_engine+0x40>
    11b0:	80 68       	ori	r24, 0x80	; 128
    11b2:	91 1d       	adc	r25, r1
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	1f 93       	push	r17
    11ba:	0f 93       	push	r16
    11bc:	ff 92       	push	r15
    11be:	ef 92       	push	r14
    11c0:	19 2f       	mov	r17, r25
    11c2:	98 7f       	andi	r25, 0xF8	; 248
    11c4:	96 95       	lsr	r25
    11c6:	e9 2f       	mov	r30, r25
    11c8:	96 95       	lsr	r25
    11ca:	96 95       	lsr	r25
    11cc:	e9 0f       	add	r30, r25
    11ce:	ff 27       	eor	r31, r31
    11d0:	e6 59       	subi	r30, 0x96	; 150
    11d2:	fe 4f       	sbci	r31, 0xFE	; 254
    11d4:	99 27       	eor	r25, r25
    11d6:	33 27       	eor	r19, r19
    11d8:	ee 24       	eor	r14, r14
    11da:	ff 24       	eor	r15, r15
    11dc:	a7 01       	movw	r20, r14
    11de:	e7 01       	movw	r28, r14
    11e0:	05 90       	lpm	r0, Z+
    11e2:	08 94       	sec
    11e4:	07 94       	ror	r0
    11e6:	28 f4       	brcc	.+10     	; 0x11f2 <__ftoa_engine+0x80>
    11e8:	36 0f       	add	r19, r22
    11ea:	e7 1e       	adc	r14, r23
    11ec:	f8 1e       	adc	r15, r24
    11ee:	49 1f       	adc	r20, r25
    11f0:	51 1d       	adc	r21, r1
    11f2:	66 0f       	add	r22, r22
    11f4:	77 1f       	adc	r23, r23
    11f6:	88 1f       	adc	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	06 94       	lsr	r0
    11fc:	a1 f7       	brne	.-24     	; 0x11e6 <__ftoa_engine+0x74>
    11fe:	05 90       	lpm	r0, Z+
    1200:	07 94       	ror	r0
    1202:	28 f4       	brcc	.+10     	; 0x120e <__ftoa_engine+0x9c>
    1204:	e7 0e       	add	r14, r23
    1206:	f8 1e       	adc	r15, r24
    1208:	49 1f       	adc	r20, r25
    120a:	56 1f       	adc	r21, r22
    120c:	c1 1d       	adc	r28, r1
    120e:	77 0f       	add	r23, r23
    1210:	88 1f       	adc	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	66 1f       	adc	r22, r22
    1216:	06 94       	lsr	r0
    1218:	a1 f7       	brne	.-24     	; 0x1202 <__ftoa_engine+0x90>
    121a:	05 90       	lpm	r0, Z+
    121c:	07 94       	ror	r0
    121e:	28 f4       	brcc	.+10     	; 0x122a <__ftoa_engine+0xb8>
    1220:	f8 0e       	add	r15, r24
    1222:	49 1f       	adc	r20, r25
    1224:	56 1f       	adc	r21, r22
    1226:	c7 1f       	adc	r28, r23
    1228:	d1 1d       	adc	r29, r1
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	66 1f       	adc	r22, r22
    1230:	77 1f       	adc	r23, r23
    1232:	06 94       	lsr	r0
    1234:	a1 f7       	brne	.-24     	; 0x121e <__ftoa_engine+0xac>
    1236:	05 90       	lpm	r0, Z+
    1238:	07 94       	ror	r0
    123a:	20 f4       	brcc	.+8      	; 0x1244 <__ftoa_engine+0xd2>
    123c:	49 0f       	add	r20, r25
    123e:	56 1f       	adc	r21, r22
    1240:	c7 1f       	adc	r28, r23
    1242:	d8 1f       	adc	r29, r24
    1244:	99 0f       	add	r25, r25
    1246:	66 1f       	adc	r22, r22
    1248:	77 1f       	adc	r23, r23
    124a:	88 1f       	adc	r24, r24
    124c:	06 94       	lsr	r0
    124e:	a9 f7       	brne	.-22     	; 0x123a <__ftoa_engine+0xc8>
    1250:	84 91       	lpm	r24, Z
    1252:	10 95       	com	r17
    1254:	17 70       	andi	r17, 0x07	; 7
    1256:	41 f0       	breq	.+16     	; 0x1268 <__ftoa_engine+0xf6>
    1258:	d6 95       	lsr	r29
    125a:	c7 95       	ror	r28
    125c:	57 95       	ror	r21
    125e:	47 95       	ror	r20
    1260:	f7 94       	ror	r15
    1262:	e7 94       	ror	r14
    1264:	1a 95       	dec	r17
    1266:	c1 f7       	brne	.-16     	; 0x1258 <__ftoa_engine+0xe6>
    1268:	e0 e1       	ldi	r30, 0x10	; 16
    126a:	f1 e0       	ldi	r31, 0x01	; 1
    126c:	68 94       	set
    126e:	15 90       	lpm	r1, Z+
    1270:	15 91       	lpm	r17, Z+
    1272:	35 91       	lpm	r19, Z+
    1274:	65 91       	lpm	r22, Z+
    1276:	95 91       	lpm	r25, Z+
    1278:	05 90       	lpm	r0, Z+
    127a:	7f e2       	ldi	r23, 0x2F	; 47
    127c:	73 95       	inc	r23
    127e:	e1 18       	sub	r14, r1
    1280:	f1 0a       	sbc	r15, r17
    1282:	43 0b       	sbc	r20, r19
    1284:	56 0b       	sbc	r21, r22
    1286:	c9 0b       	sbc	r28, r25
    1288:	d0 09       	sbc	r29, r0
    128a:	c0 f7       	brcc	.-16     	; 0x127c <__ftoa_engine+0x10a>
    128c:	e1 0c       	add	r14, r1
    128e:	f1 1e       	adc	r15, r17
    1290:	43 1f       	adc	r20, r19
    1292:	56 1f       	adc	r21, r22
    1294:	c9 1f       	adc	r28, r25
    1296:	d0 1d       	adc	r29, r0
    1298:	7e f4       	brtc	.+30     	; 0x12b8 <__ftoa_engine+0x146>
    129a:	70 33       	cpi	r23, 0x30	; 48
    129c:	11 f4       	brne	.+4      	; 0x12a2 <__ftoa_engine+0x130>
    129e:	8a 95       	dec	r24
    12a0:	e6 cf       	rjmp	.-52     	; 0x126e <__ftoa_engine+0xfc>
    12a2:	e8 94       	clt
    12a4:	01 50       	subi	r16, 0x01	; 1
    12a6:	30 f0       	brcs	.+12     	; 0x12b4 <__ftoa_engine+0x142>
    12a8:	08 0f       	add	r16, r24
    12aa:	0a f4       	brpl	.+2      	; 0x12ae <__ftoa_engine+0x13c>
    12ac:	00 27       	eor	r16, r16
    12ae:	02 17       	cp	r16, r18
    12b0:	08 f4       	brcc	.+2      	; 0x12b4 <__ftoa_engine+0x142>
    12b2:	20 2f       	mov	r18, r16
    12b4:	23 95       	inc	r18
    12b6:	02 2f       	mov	r16, r18
    12b8:	7a 33       	cpi	r23, 0x3A	; 58
    12ba:	28 f0       	brcs	.+10     	; 0x12c6 <__ftoa_engine+0x154>
    12bc:	79 e3       	ldi	r23, 0x39	; 57
    12be:	7d 93       	st	X+, r23
    12c0:	2a 95       	dec	r18
    12c2:	e9 f7       	brne	.-6      	; 0x12be <__ftoa_engine+0x14c>
    12c4:	10 c0       	rjmp	.+32     	; 0x12e6 <__ftoa_engine+0x174>
    12c6:	7d 93       	st	X+, r23
    12c8:	2a 95       	dec	r18
    12ca:	89 f6       	brne	.-94     	; 0x126e <__ftoa_engine+0xfc>
    12cc:	06 94       	lsr	r0
    12ce:	97 95       	ror	r25
    12d0:	67 95       	ror	r22
    12d2:	37 95       	ror	r19
    12d4:	17 95       	ror	r17
    12d6:	17 94       	ror	r1
    12d8:	e1 18       	sub	r14, r1
    12da:	f1 0a       	sbc	r15, r17
    12dc:	43 0b       	sbc	r20, r19
    12de:	56 0b       	sbc	r21, r22
    12e0:	c9 0b       	sbc	r28, r25
    12e2:	d0 09       	sbc	r29, r0
    12e4:	98 f0       	brcs	.+38     	; 0x130c <__ftoa_engine+0x19a>
    12e6:	23 95       	inc	r18
    12e8:	7e 91       	ld	r23, -X
    12ea:	73 95       	inc	r23
    12ec:	7a 33       	cpi	r23, 0x3A	; 58
    12ee:	08 f0       	brcs	.+2      	; 0x12f2 <__ftoa_engine+0x180>
    12f0:	70 e3       	ldi	r23, 0x30	; 48
    12f2:	7c 93       	st	X, r23
    12f4:	20 13       	cpse	r18, r16
    12f6:	b8 f7       	brcc	.-18     	; 0x12e6 <__ftoa_engine+0x174>
    12f8:	7e 91       	ld	r23, -X
    12fa:	70 61       	ori	r23, 0x10	; 16
    12fc:	7d 93       	st	X+, r23
    12fe:	30 f0       	brcs	.+12     	; 0x130c <__ftoa_engine+0x19a>
    1300:	83 95       	inc	r24
    1302:	71 e3       	ldi	r23, 0x31	; 49
    1304:	7d 93       	st	X+, r23
    1306:	70 e3       	ldi	r23, 0x30	; 48
    1308:	2a 95       	dec	r18
    130a:	e1 f7       	brne	.-8      	; 0x1304 <__ftoa_engine+0x192>
    130c:	11 24       	eor	r1, r1
    130e:	ef 90       	pop	r14
    1310:	ff 90       	pop	r15
    1312:	0f 91       	pop	r16
    1314:	1f 91       	pop	r17
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	99 27       	eor	r25, r25
    131c:	87 fd       	sbrc	r24, 7
    131e:	90 95       	com	r25
    1320:	08 95       	ret

00001322 <__prologue_saves__>:
    1322:	2f 92       	push	r2
    1324:	3f 92       	push	r3
    1326:	4f 92       	push	r4
    1328:	5f 92       	push	r5
    132a:	6f 92       	push	r6
    132c:	7f 92       	push	r7
    132e:	8f 92       	push	r8
    1330:	9f 92       	push	r9
    1332:	af 92       	push	r10
    1334:	bf 92       	push	r11
    1336:	cf 92       	push	r12
    1338:	df 92       	push	r13
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	ca 1b       	sub	r28, r26
    134c:	db 0b       	sbc	r29, r27
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	09 94       	ijmp

0000135a <__epilogue_restores__>:
    135a:	2a 88       	ldd	r2, Y+18	; 0x12
    135c:	39 88       	ldd	r3, Y+17	; 0x11
    135e:	48 88       	ldd	r4, Y+16	; 0x10
    1360:	5f 84       	ldd	r5, Y+15	; 0x0f
    1362:	6e 84       	ldd	r6, Y+14	; 0x0e
    1364:	7d 84       	ldd	r7, Y+13	; 0x0d
    1366:	8c 84       	ldd	r8, Y+12	; 0x0c
    1368:	9b 84       	ldd	r9, Y+11	; 0x0b
    136a:	aa 84       	ldd	r10, Y+10	; 0x0a
    136c:	b9 84       	ldd	r11, Y+9	; 0x09
    136e:	c8 84       	ldd	r12, Y+8	; 0x08
    1370:	df 80       	ldd	r13, Y+7	; 0x07
    1372:	ee 80       	ldd	r14, Y+6	; 0x06
    1374:	fd 80       	ldd	r15, Y+5	; 0x05
    1376:	0c 81       	ldd	r16, Y+4	; 0x04
    1378:	1b 81       	ldd	r17, Y+3	; 0x03
    137a:	aa 81       	ldd	r26, Y+2	; 0x02
    137c:	b9 81       	ldd	r27, Y+1	; 0x01
    137e:	ce 0f       	add	r28, r30
    1380:	d1 1d       	adc	r29, r1
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	ed 01       	movw	r28, r26
    138e:	08 95       	ret

00001390 <_exit>:
    1390:	f8 94       	cli

00001392 <__stop_program>:
    1392:	ff cf       	rjmp	.-2      	; 0x1392 <__stop_program>
